== Physical Plan ==
* Sort (111)
+- Exchange (110)
   +- * Project (109)
      +- * BroadcastHashJoin Inner BuildRight (108)
         :- * Project (90)
         :  +- * BroadcastHashJoin Inner BuildRight (89)
         :     :- * BroadcastHashJoin Inner BuildRight (71)
         :     :  :- * Project (53)
         :     :  :  +- * BroadcastHashJoin Inner BuildRight (52)
         :     :  :     :- * BroadcastHashJoin Inner BuildRight (34)
         :     :  :     :  :- * HashAggregate (16)
         :     :  :     :  :  +- Exchange (15)
         :     :  :     :  :     +- * ColumnarToRow (14)
         :     :  :     :  :        +- CometHashAggregate (13)
         :     :  :     :  :           +- CometProject (12)
         :     :  :     :  :              +- CometBroadcastHashJoin (11)
         :     :  :     :  :                 :- CometProject (7)
         :     :  :     :  :                 :  +- CometBroadcastHashJoin (6)
         :     :  :     :  :                 :     :- CometFilter (2)
         :     :  :     :  :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :  :     :  :                 :     +- CometBroadcastExchange (5)
         :     :  :     :  :                 :        +- CometFilter (4)
         :     :  :     :  :                 :           +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :  :     :  :                 +- CometBroadcastExchange (10)
         :     :  :     :  :                    +- CometFilter (9)
         :     :  :     :  :                       +- CometScan parquet spark_catalog.default.customer_address (8)
         :     :  :     :  +- BroadcastExchange (33)
         :     :  :     :     +- * HashAggregate (32)
         :     :  :     :        +- Exchange (31)
         :     :  :     :           +- * ColumnarToRow (30)
         :     :  :     :              +- CometHashAggregate (29)
         :     :  :     :                 +- CometProject (28)
         :     :  :     :                    +- CometBroadcastHashJoin (27)
         :     :  :     :                       :- CometProject (23)
         :     :  :     :                       :  +- CometBroadcastHashJoin (22)
         :     :  :     :                       :     :- CometFilter (18)
         :     :  :     :                       :     :  +- CometScan parquet spark_catalog.default.store_sales (17)
         :     :  :     :                       :     +- CometBroadcastExchange (21)
         :     :  :     :                       :        +- CometFilter (20)
         :     :  :     :                       :           +- CometScan parquet spark_catalog.default.date_dim (19)
         :     :  :     :                       +- CometBroadcastExchange (26)
         :     :  :     :                          +- CometFilter (25)
         :     :  :     :                             +- CometScan parquet spark_catalog.default.customer_address (24)
         :     :  :     +- BroadcastExchange (51)
         :     :  :        +- * HashAggregate (50)
         :     :  :           +- Exchange (49)
         :     :  :              +- * ColumnarToRow (48)
         :     :  :                 +- CometHashAggregate (47)
         :     :  :                    +- CometProject (46)
         :     :  :                       +- CometBroadcastHashJoin (45)
         :     :  :                          :- CometProject (41)
         :     :  :                          :  +- CometBroadcastHashJoin (40)
         :     :  :                          :     :- CometFilter (36)
         :     :  :                          :     :  +- CometScan parquet spark_catalog.default.store_sales (35)
         :     :  :                          :     +- CometBroadcastExchange (39)
         :     :  :                          :        +- CometFilter (38)
         :     :  :                          :           +- CometScan parquet spark_catalog.default.date_dim (37)
         :     :  :                          +- CometBroadcastExchange (44)
         :     :  :                             +- CometFilter (43)
         :     :  :                                +- CometScan parquet spark_catalog.default.customer_address (42)
         :     :  +- BroadcastExchange (70)
         :     :     +- * HashAggregate (69)
         :     :        +- Exchange (68)
         :     :           +- * ColumnarToRow (67)
         :     :              +- CometHashAggregate (66)
         :     :                 +- CometProject (65)
         :     :                    +- CometBroadcastHashJoin (64)
         :     :                       :- CometProject (60)
         :     :                       :  +- CometBroadcastHashJoin (59)
         :     :                       :     :- CometFilter (55)
         :     :                       :     :  +- CometScan parquet spark_catalog.default.web_sales (54)
         :     :                       :     +- CometBroadcastExchange (58)
         :     :                       :        +- CometFilter (57)
         :     :                       :           +- CometScan parquet spark_catalog.default.date_dim (56)
         :     :                       +- CometBroadcastExchange (63)
         :     :                          +- CometFilter (62)
         :     :                             +- CometScan parquet spark_catalog.default.customer_address (61)
         :     +- BroadcastExchange (88)
         :        +- * HashAggregate (87)
         :           +- Exchange (86)
         :              +- * ColumnarToRow (85)
         :                 +- CometHashAggregate (84)
         :                    +- CometProject (83)
         :                       +- CometBroadcastHashJoin (82)
         :                          :- CometProject (78)
         :                          :  +- CometBroadcastHashJoin (77)
         :                          :     :- CometFilter (73)
         :                          :     :  +- CometScan parquet spark_catalog.default.web_sales (72)
         :                          :     +- CometBroadcastExchange (76)
         :                          :        +- CometFilter (75)
         :                          :           +- CometScan parquet spark_catalog.default.date_dim (74)
         :                          +- CometBroadcastExchange (81)
         :                             +- CometFilter (80)
         :                                +- CometScan parquet spark_catalog.default.customer_address (79)
         +- BroadcastExchange (107)
            +- * HashAggregate (106)
               +- Exchange (105)
                  +- * ColumnarToRow (104)
                     +- CometHashAggregate (103)
                        +- CometProject (102)
                           +- CometBroadcastHashJoin (101)
                              :- CometProject (97)
                              :  +- CometBroadcastHashJoin (96)
                              :     :- CometFilter (92)
                              :     :  +- CometScan parquet spark_catalog.default.web_sales (91)
                              :     +- CometBroadcastExchange (95)
                              :        +- CometFilter (94)
                              :           +- CometScan parquet spark_catalog.default.date_dim (93)
                              +- CometBroadcastExchange (100)
                                 +- CometFilter (99)
                                    +- CometScan parquet spark_catalog.default.customer_address (98)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_addr_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(4) CometFilter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 1)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(5) CometBroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: [d_date_sk#5, d_year#6, d_qoy#7]

(6) CometBroadcastHashJoin
Left output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner

(7) CometProject
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6, d_qoy#7]
Arguments: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7], [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]

(8) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_county#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(9) CometFilter
Input [2]: [ca_address_sk#8, ca_county#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(ca_county#9))

(10) CometBroadcastExchange
Input [2]: [ca_address_sk#8, ca_county#9]
Arguments: [ca_address_sk#8, ca_county#9]

(11) CometBroadcastHashJoin
Left output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Right output [2]: [ca_address_sk#8, ca_county#9]
Arguments: [ss_addr_sk#1], [ca_address_sk#8], Inner

(12) CometProject
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_address_sk#8, ca_county#9]
Arguments: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9], [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9]

(13) CometHashAggregate
Input [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9]
Keys [3]: [ca_county#9, d_qoy#7, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(14) ColumnarToRow [codegen id : 1]
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#10]

(15) Exchange
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#10]
Arguments: hashpartitioning(ca_county#9, d_qoy#7, d_year#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(16) HashAggregate [codegen id : 12]
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#10]
Keys [3]: [ca_county#9, d_qoy#7, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#11]
Results [3]: [ca_county#9, d_year#6, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#11,17,2) AS store_sales#12]

(17) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#15), dynamicpruningexpression(ss_sold_date_sk#15 IN dynamicpruning#16)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(18) CometFilter
Input [3]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15]
Condition : isnotnull(ss_addr_sk#13)

(19) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(20) CometFilter
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Condition : ((((isnotnull(d_qoy#19) AND isnotnull(d_year#18)) AND (d_qoy#19 = 2)) AND (d_year#18 = 2000)) AND isnotnull(d_date_sk#17))

(21) CometBroadcastExchange
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Arguments: [d_date_sk#17, d_year#18, d_qoy#19]

(22) CometBroadcastHashJoin
Left output [3]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15]
Right output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Arguments: [ss_sold_date_sk#15], [d_date_sk#17], Inner

(23) CometProject
Input [6]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15, d_date_sk#17, d_year#18, d_qoy#19]
Arguments: [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19], [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19]

(24) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#20, ca_county#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(25) CometFilter
Input [2]: [ca_address_sk#20, ca_county#21]
Condition : (isnotnull(ca_address_sk#20) AND isnotnull(ca_county#21))

(26) CometBroadcastExchange
Input [2]: [ca_address_sk#20, ca_county#21]
Arguments: [ca_address_sk#20, ca_county#21]

(27) CometBroadcastHashJoin
Left output [4]: [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19]
Right output [2]: [ca_address_sk#20, ca_county#21]
Arguments: [ss_addr_sk#13], [ca_address_sk#20], Inner

(28) CometProject
Input [6]: [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_address_sk#20, ca_county#21]
Arguments: [ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_county#21], [ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_county#21]

(29) CometHashAggregate
Input [4]: [ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_county#21]
Keys [3]: [ca_county#21, d_qoy#19, d_year#18]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#14))]

(30) ColumnarToRow [codegen id : 2]
Input [4]: [ca_county#21, d_qoy#19, d_year#18, sum#22]

(31) Exchange
Input [4]: [ca_county#21, d_qoy#19, d_year#18, sum#22]
Arguments: hashpartitioning(ca_county#21, d_qoy#19, d_year#18, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(32) HashAggregate [codegen id : 3]
Input [4]: [ca_county#21, d_qoy#19, d_year#18, sum#22]
Keys [3]: [ca_county#21, d_qoy#19, d_year#18]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#14))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#14))#11]
Results [2]: [ca_county#21, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#14))#11,17,2) AS store_sales#23]

(33) BroadcastExchange
Input [2]: [ca_county#21, store_sales#23]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(34) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#9]
Right keys [1]: [ca_county#21]
Join type: Inner
Join condition: None

(35) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(36) CometFilter
Input [3]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_addr_sk#24)

(37) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(38) CometFilter
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Condition : ((((isnotnull(d_qoy#30) AND isnotnull(d_year#29)) AND (d_qoy#30 = 3)) AND (d_year#29 = 2000)) AND isnotnull(d_date_sk#28))

(39) CometBroadcastExchange
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Arguments: [d_date_sk#28, d_year#29, d_qoy#30]

(40) CometBroadcastHashJoin
Left output [3]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Right output [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Arguments: [ss_sold_date_sk#26], [d_date_sk#28], Inner

(41) CometProject
Input [6]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26, d_date_sk#28, d_year#29, d_qoy#30]
Arguments: [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30], [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30]

(42) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#31, ca_county#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(43) CometFilter
Input [2]: [ca_address_sk#31, ca_county#32]
Condition : (isnotnull(ca_address_sk#31) AND isnotnull(ca_county#32))

(44) CometBroadcastExchange
Input [2]: [ca_address_sk#31, ca_county#32]
Arguments: [ca_address_sk#31, ca_county#32]

(45) CometBroadcastHashJoin
Left output [4]: [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30]
Right output [2]: [ca_address_sk#31, ca_county#32]
Arguments: [ss_addr_sk#24], [ca_address_sk#31], Inner

(46) CometProject
Input [6]: [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_address_sk#31, ca_county#32]
Arguments: [ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_county#32], [ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_county#32]

(47) CometHashAggregate
Input [4]: [ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_county#32]
Keys [3]: [ca_county#32, d_qoy#30, d_year#29]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#25))]

(48) ColumnarToRow [codegen id : 4]
Input [4]: [ca_county#32, d_qoy#30, d_year#29, sum#33]

(49) Exchange
Input [4]: [ca_county#32, d_qoy#30, d_year#29, sum#33]
Arguments: hashpartitioning(ca_county#32, d_qoy#30, d_year#29, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(50) HashAggregate [codegen id : 5]
Input [4]: [ca_county#32, d_qoy#30, d_year#29, sum#33]
Keys [3]: [ca_county#32, d_qoy#30, d_year#29]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#25))#11]
Results [2]: [ca_county#32, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#25))#11,17,2) AS store_sales#34]

(51) BroadcastExchange
Input [2]: [ca_county#32, store_sales#34]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(52) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#21]
Right keys [1]: [ca_county#32]
Join type: Inner
Join condition: None

(53) Project [codegen id : 12]
Output [5]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34]
Input [7]: [ca_county#9, d_year#6, store_sales#12, ca_county#21, store_sales#23, ca_county#32, store_sales#34]

(54) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(ws_sold_date_sk#37 IN dynamicpruning#38)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(55) CometFilter
Input [3]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Condition : isnotnull(ws_bill_addr_sk#35)

(56) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#39, d_year#40, d_qoy#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(57) CometFilter
Input [3]: [d_date_sk#39, d_year#40, d_qoy#41]
Condition : ((((isnotnull(d_qoy#41) AND isnotnull(d_year#40)) AND (d_qoy#41 = 1)) AND (d_year#40 = 2000)) AND isnotnull(d_date_sk#39))

(58) CometBroadcastExchange
Input [3]: [d_date_sk#39, d_year#40, d_qoy#41]
Arguments: [d_date_sk#39, d_year#40, d_qoy#41]

(59) CometBroadcastHashJoin
Left output [3]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Right output [3]: [d_date_sk#39, d_year#40, d_qoy#41]
Arguments: [ws_sold_date_sk#37], [d_date_sk#39], Inner

(60) CometProject
Input [6]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37, d_date_sk#39, d_year#40, d_qoy#41]
Arguments: [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41], [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41]

(61) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#42, ca_county#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(62) CometFilter
Input [2]: [ca_address_sk#42, ca_county#43]
Condition : (isnotnull(ca_address_sk#42) AND isnotnull(ca_county#43))

(63) CometBroadcastExchange
Input [2]: [ca_address_sk#42, ca_county#43]
Arguments: [ca_address_sk#42, ca_county#43]

(64) CometBroadcastHashJoin
Left output [4]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41]
Right output [2]: [ca_address_sk#42, ca_county#43]
Arguments: [ws_bill_addr_sk#35], [ca_address_sk#42], Inner

(65) CometProject
Input [6]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_address_sk#42, ca_county#43]
Arguments: [ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_county#43], [ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_county#43]

(66) CometHashAggregate
Input [4]: [ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_county#43]
Keys [3]: [ca_county#43, d_qoy#41, d_year#40]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#36))]

(67) ColumnarToRow [codegen id : 6]
Input [4]: [ca_county#43, d_qoy#41, d_year#40, sum#44]

(68) Exchange
Input [4]: [ca_county#43, d_qoy#41, d_year#40, sum#44]
Arguments: hashpartitioning(ca_county#43, d_qoy#41, d_year#40, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(69) HashAggregate [codegen id : 7]
Input [4]: [ca_county#43, d_qoy#41, d_year#40, sum#44]
Keys [3]: [ca_county#43, d_qoy#41, d_year#40]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#36))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#36))#45]
Results [2]: [ca_county#43, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#36))#45,17,2) AS web_sales#46]

(70) BroadcastExchange
Input [2]: [ca_county#43, web_sales#46]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=7]

(71) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#9]
Right keys [1]: [ca_county#43]
Join type: Inner
Join condition: None

(72) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#49), dynamicpruningexpression(ws_sold_date_sk#49 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(73) CometFilter
Input [3]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49]
Condition : isnotnull(ws_bill_addr_sk#47)

(74) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#51, d_year#52, d_qoy#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(75) CometFilter
Input [3]: [d_date_sk#51, d_year#52, d_qoy#53]
Condition : ((((isnotnull(d_qoy#53) AND isnotnull(d_year#52)) AND (d_qoy#53 = 2)) AND (d_year#52 = 2000)) AND isnotnull(d_date_sk#51))

(76) CometBroadcastExchange
Input [3]: [d_date_sk#51, d_year#52, d_qoy#53]
Arguments: [d_date_sk#51, d_year#52, d_qoy#53]

(77) CometBroadcastHashJoin
Left output [3]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49]
Right output [3]: [d_date_sk#51, d_year#52, d_qoy#53]
Arguments: [ws_sold_date_sk#49], [d_date_sk#51], Inner

(78) CometProject
Input [6]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49, d_date_sk#51, d_year#52, d_qoy#53]
Arguments: [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53], [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53]

(79) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#54, ca_county#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(80) CometFilter
Input [2]: [ca_address_sk#54, ca_county#55]
Condition : (isnotnull(ca_address_sk#54) AND isnotnull(ca_county#55))

(81) CometBroadcastExchange
Input [2]: [ca_address_sk#54, ca_county#55]
Arguments: [ca_address_sk#54, ca_county#55]

(82) CometBroadcastHashJoin
Left output [4]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53]
Right output [2]: [ca_address_sk#54, ca_county#55]
Arguments: [ws_bill_addr_sk#47], [ca_address_sk#54], Inner

(83) CometProject
Input [6]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_address_sk#54, ca_county#55]
Arguments: [ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_county#55], [ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_county#55]

(84) CometHashAggregate
Input [4]: [ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_county#55]
Keys [3]: [ca_county#55, d_qoy#53, d_year#52]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#48))]

(85) ColumnarToRow [codegen id : 8]
Input [4]: [ca_county#55, d_qoy#53, d_year#52, sum#56]

(86) Exchange
Input [4]: [ca_county#55, d_qoy#53, d_year#52, sum#56]
Arguments: hashpartitioning(ca_county#55, d_qoy#53, d_year#52, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(87) HashAggregate [codegen id : 9]
Input [4]: [ca_county#55, d_qoy#53, d_year#52, sum#56]
Keys [3]: [ca_county#55, d_qoy#53, d_year#52]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#48))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#48))#45]
Results [2]: [ca_county#55, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#48))#45,17,2) AS web_sales#57]

(88) BroadcastExchange
Input [2]: [ca_county#55, web_sales#57]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=9]

(89) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#43]
Right keys [1]: [ca_county#55]
Join type: Inner
Join condition: (CASE WHEN (web_sales#46 > 0.00) THEN (web_sales#57 / web_sales#46) END > CASE WHEN (store_sales#12 > 0.00) THEN (store_sales#23 / store_sales#12) END)

(90) Project [codegen id : 12]
Output [8]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34, ca_county#43, web_sales#46, web_sales#57]
Input [9]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34, ca_county#43, web_sales#46, ca_county#55, web_sales#57]

(91) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#60), dynamicpruningexpression(ws_sold_date_sk#60 IN dynamicpruning#61)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(92) CometFilter
Input [3]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60]
Condition : isnotnull(ws_bill_addr_sk#58)

(93) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#62, d_year#63, d_qoy#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(94) CometFilter
Input [3]: [d_date_sk#62, d_year#63, d_qoy#64]
Condition : ((((isnotnull(d_qoy#64) AND isnotnull(d_year#63)) AND (d_qoy#64 = 3)) AND (d_year#63 = 2000)) AND isnotnull(d_date_sk#62))

(95) CometBroadcastExchange
Input [3]: [d_date_sk#62, d_year#63, d_qoy#64]
Arguments: [d_date_sk#62, d_year#63, d_qoy#64]

(96) CometBroadcastHashJoin
Left output [3]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60]
Right output [3]: [d_date_sk#62, d_year#63, d_qoy#64]
Arguments: [ws_sold_date_sk#60], [d_date_sk#62], Inner

(97) CometProject
Input [6]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60, d_date_sk#62, d_year#63, d_qoy#64]
Arguments: [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64], [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64]

(98) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#65, ca_county#66]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(99) CometFilter
Input [2]: [ca_address_sk#65, ca_county#66]
Condition : (isnotnull(ca_address_sk#65) AND isnotnull(ca_county#66))

(100) CometBroadcastExchange
Input [2]: [ca_address_sk#65, ca_county#66]
Arguments: [ca_address_sk#65, ca_county#66]

(101) CometBroadcastHashJoin
Left output [4]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64]
Right output [2]: [ca_address_sk#65, ca_county#66]
Arguments: [ws_bill_addr_sk#58], [ca_address_sk#65], Inner

(102) CometProject
Input [6]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_address_sk#65, ca_county#66]
Arguments: [ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_county#66], [ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_county#66]

(103) CometHashAggregate
Input [4]: [ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_county#66]
Keys [3]: [ca_county#66, d_qoy#64, d_year#63]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#59))]

(104) ColumnarToRow [codegen id : 10]
Input [4]: [ca_county#66, d_qoy#64, d_year#63, sum#67]

(105) Exchange
Input [4]: [ca_county#66, d_qoy#64, d_year#63, sum#67]
Arguments: hashpartitioning(ca_county#66, d_qoy#64, d_year#63, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(106) HashAggregate [codegen id : 11]
Input [4]: [ca_county#66, d_qoy#64, d_year#63, sum#67]
Keys [3]: [ca_county#66, d_qoy#64, d_year#63]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#59))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#59))#45]
Results [2]: [ca_county#66, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#59))#45,17,2) AS web_sales#68]

(107) BroadcastExchange
Input [2]: [ca_county#66, web_sales#68]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(108) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#43]
Right keys [1]: [ca_county#66]
Join type: Inner
Join condition: (CASE WHEN (web_sales#57 > 0.00) THEN (web_sales#68 / web_sales#57) END > CASE WHEN (store_sales#23 > 0.00) THEN (store_sales#34 / store_sales#23) END)

(109) Project [codegen id : 12]
Output [6]: [ca_county#9, d_year#6, (web_sales#57 / web_sales#46) AS web_q1_q2_increase#69, (store_sales#23 / store_sales#12) AS store_q1_q2_increase#70, (web_sales#68 / web_sales#57) AS web_q2_q3_increase#71, (store_sales#34 / store_sales#23) AS store_q2_q3_increase#72]
Input [10]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34, ca_county#43, web_sales#46, web_sales#57, ca_county#66, web_sales#68]

(110) Exchange
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#69, store_q1_q2_increase#70, web_q2_q3_increase#71, store_q2_q3_increase#72]
Arguments: rangepartitioning(ca_county#9 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(111) Sort [codegen id : 13]
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#69, store_q1_q2_increase#70, web_q2_q3_increase#71, store_q2_q3_increase#72]
Arguments: [ca_county#9 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (115)
+- * ColumnarToRow (114)
   +- CometFilter (113)
      +- CometScan parquet spark_catalog.default.date_dim (112)


(112) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(113) CometFilter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 1)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(114) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(115) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 17 Hosting Expression = ss_sold_date_sk#15 IN dynamicpruning#16
BroadcastExchange (119)
+- * ColumnarToRow (118)
   +- CometFilter (117)
      +- CometScan parquet spark_catalog.default.date_dim (116)


(116) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(117) CometFilter
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Condition : ((((isnotnull(d_qoy#19) AND isnotnull(d_year#18)) AND (d_qoy#19 = 2)) AND (d_year#18 = 2000)) AND isnotnull(d_date_sk#17))

(118) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]

(119) BroadcastExchange
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14]

Subquery:3 Hosting operator id = 35 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#27
BroadcastExchange (123)
+- * ColumnarToRow (122)
   +- CometFilter (121)
      +- CometScan parquet spark_catalog.default.date_dim (120)


(120) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(121) CometFilter
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Condition : ((((isnotnull(d_qoy#30) AND isnotnull(d_year#29)) AND (d_qoy#30 = 3)) AND (d_year#29 = 2000)) AND isnotnull(d_date_sk#28))

(122) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]

(123) BroadcastExchange
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

Subquery:4 Hosting operator id = 54 Hosting Expression = ws_sold_date_sk#37 IN dynamicpruning#4

Subquery:5 Hosting operator id = 72 Hosting Expression = ws_sold_date_sk#49 IN dynamicpruning#16

Subquery:6 Hosting operator id = 91 Hosting Expression = ws_sold_date_sk#60 IN dynamicpruning#27


