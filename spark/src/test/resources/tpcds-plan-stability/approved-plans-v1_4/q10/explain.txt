== Physical Plan ==
TakeOrderedAndProject (51)
+- * HashAggregate (50)
   +- Exchange (49)
      +- * HashAggregate (48)
         +- * Project (47)
            +- * BroadcastHashJoin Inner BuildRight (46)
               :- * Project (41)
               :  +- * BroadcastHashJoin Inner BuildRight (40)
               :     :- * Project (34)
               :     :  +- * Filter (33)
               :     :     +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (32)
               :     :        :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (22)
               :     :        :  :- * ColumnarToRow (12)
               :     :        :  :  +- CometBroadcastHashJoin (11)
               :     :        :  :     :- CometFilter (2)
               :     :        :  :     :  +- CometScan parquet spark_catalog.default.customer (1)
               :     :        :  :     +- CometBroadcastExchange (10)
               :     :        :  :        +- CometProject (9)
               :     :        :  :           +- CometBroadcastHashJoin (8)
               :     :        :  :              :- CometScan parquet spark_catalog.default.store_sales (3)
               :     :        :  :              +- CometBroadcastExchange (7)
               :     :        :  :                 +- CometProject (6)
               :     :        :  :                    +- CometFilter (5)
               :     :        :  :                       +- CometScan parquet spark_catalog.default.date_dim (4)
               :     :        :  +- BroadcastExchange (21)
               :     :        :     +- * ColumnarToRow (20)
               :     :        :        +- CometProject (19)
               :     :        :           +- CometBroadcastHashJoin (18)
               :     :        :              :- CometScan parquet spark_catalog.default.web_sales (13)
               :     :        :              +- CometBroadcastExchange (17)
               :     :        :                 +- CometProject (16)
               :     :        :                    +- CometFilter (15)
               :     :        :                       +- CometScan parquet spark_catalog.default.date_dim (14)
               :     :        +- BroadcastExchange (31)
               :     :           +- * ColumnarToRow (30)
               :     :              +- CometProject (29)
               :     :                 +- CometBroadcastHashJoin (28)
               :     :                    :- CometScan parquet spark_catalog.default.catalog_sales (23)
               :     :                    +- CometBroadcastExchange (27)
               :     :                       +- CometProject (26)
               :     :                          +- CometFilter (25)
               :     :                             +- CometScan parquet spark_catalog.default.date_dim (24)
               :     +- BroadcastExchange (39)
               :        +- * ColumnarToRow (38)
               :           +- CometProject (37)
               :              +- CometFilter (36)
               :                 +- CometScan parquet spark_catalog.default.customer_address (35)
               +- BroadcastExchange (45)
                  +- * ColumnarToRow (44)
                     +- CometFilter (43)
                        +- CometScan parquet spark_catalog.default.customer_demographics (42)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) CometFilter
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(3) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
ReadSchema: struct<ss_customer_sk:int>

(4) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(5) CometFilter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : (((((isnotnull(d_year#10) AND isnotnull(d_moy#11)) AND (d_year#10 = 2002)) AND (d_moy#11 >= 1)) AND (d_moy#11 <= 4)) AND isnotnull(d_date_sk#9))

(6) CometProject
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Arguments: [d_date_sk#9], [d_date_sk#9]

(7) CometBroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: [d_date_sk#9]

(8) CometBroadcastHashJoin
Left output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Right output [1]: [d_date_sk#9]
Arguments: [ss_sold_date_sk#7], [d_date_sk#9], Inner

(9) CometProject
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#9]
Arguments: [ss_customer_sk#6], [ss_customer_sk#6]

(10) CometBroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6]

(11) CometBroadcastHashJoin
Left output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Right output [1]: [ss_customer_sk#6]
Arguments: [c_customer_sk#3], [ss_customer_sk#6], LeftSemi

(12) ColumnarToRow [codegen id : 5]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(13) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#12, ws_sold_date_sk#13]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#13), dynamicpruningexpression(ws_sold_date_sk#13 IN dynamicpruning#14)]
ReadSchema: struct<ws_bill_customer_sk:int>

(14) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#15, d_year#16, d_moy#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(15) CometFilter
Input [3]: [d_date_sk#15, d_year#16, d_moy#17]
Condition : (((((isnotnull(d_year#16) AND isnotnull(d_moy#17)) AND (d_year#16 = 2002)) AND (d_moy#17 >= 1)) AND (d_moy#17 <= 4)) AND isnotnull(d_date_sk#15))

(16) CometProject
Input [3]: [d_date_sk#15, d_year#16, d_moy#17]
Arguments: [d_date_sk#15], [d_date_sk#15]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: [d_date_sk#15]

(18) CometBroadcastHashJoin
Left output [2]: [ws_bill_customer_sk#12, ws_sold_date_sk#13]
Right output [1]: [d_date_sk#15]
Arguments: [ws_sold_date_sk#13], [d_date_sk#15], Inner

(19) CometProject
Input [3]: [ws_bill_customer_sk#12, ws_sold_date_sk#13, d_date_sk#15]
Arguments: [ws_bill_customer_sk#12], [ws_bill_customer_sk#12]

(20) ColumnarToRow [codegen id : 1]
Input [1]: [ws_bill_customer_sk#12]

(21) BroadcastExchange
Input [1]: [ws_bill_customer_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(22) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#12]
Join type: ExistenceJoin(exists#2)
Join condition: None

(23) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#20)]
ReadSchema: struct<cs_ship_customer_sk:int>

(24) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#21, d_year#22, d_moy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(25) CometFilter
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]
Condition : (((((isnotnull(d_year#22) AND isnotnull(d_moy#23)) AND (d_year#22 = 2002)) AND (d_moy#23 >= 1)) AND (d_moy#23 <= 4)) AND isnotnull(d_date_sk#21))

(26) CometProject
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]
Arguments: [d_date_sk#21], [d_date_sk#21]

(27) CometBroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: [d_date_sk#21]

(28) CometBroadcastHashJoin
Left output [2]: [cs_ship_customer_sk#18, cs_sold_date_sk#19]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#19], [d_date_sk#21], Inner

(29) CometProject
Input [3]: [cs_ship_customer_sk#18, cs_sold_date_sk#19, d_date_sk#21]
Arguments: [cs_ship_customer_sk#18], [cs_ship_customer_sk#18]

(30) ColumnarToRow [codegen id : 2]
Input [1]: [cs_ship_customer_sk#18]

(31) BroadcastExchange
Input [1]: [cs_ship_customer_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(32) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#18]
Join type: ExistenceJoin(exists#1)
Join condition: None

(33) Filter [codegen id : 5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(34) Project [codegen id : 5]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(35) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#24, ca_county#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_county, [Dona Ana County,Jefferson County,La Porte County,Rush County,Toole County]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(36) CometFilter
Input [2]: [ca_address_sk#24, ca_county#25]
Condition : (ca_county#25 IN (Rush County,Toole County,Jefferson County,Dona Ana County,La Porte County) AND isnotnull(ca_address_sk#24))

(37) CometProject
Input [2]: [ca_address_sk#24, ca_county#25]
Arguments: [ca_address_sk#24], [ca_address_sk#24]

(38) ColumnarToRow [codegen id : 3]
Input [1]: [ca_address_sk#24]

(39) BroadcastExchange
Input [1]: [ca_address_sk#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(40) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#24]
Join type: Inner
Join condition: None

(41) Project [codegen id : 5]
Output [1]: [c_current_cdemo_sk#4]
Input [3]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#24]

(42) Scan parquet spark_catalog.default.customer_demographics
Output [9]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string,cd_purchase_estimate:int,cd_credit_rating:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(43) CometFilter
Input [9]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Condition : isnotnull(cd_demo_sk#26)

(44) ColumnarToRow [codegen id : 4]
Input [9]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]

(45) BroadcastExchange
Input [9]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(46) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#26]
Join type: Inner
Join condition: None

(47) Project [codegen id : 5]
Output [8]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Input [10]: [c_current_cdemo_sk#4, cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]

(48) HashAggregate [codegen id : 5]
Input [8]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Keys [8]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#35]
Results [9]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34, count#36]

(49) Exchange
Input [9]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34, count#36]
Arguments: hashpartitioning(cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(50) HashAggregate [codegen id : 6]
Input [9]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34, count#36]
Keys [8]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cd_purchase_estimate#30, cd_credit_rating#31, cd_dep_count#32, cd_dep_employed_count#33, cd_dep_college_count#34]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#37]
Results [14]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, count(1)#37 AS cnt1#38, cd_purchase_estimate#30, count(1)#37 AS cnt2#39, cd_credit_rating#31, count(1)#37 AS cnt3#40, cd_dep_count#32, count(1)#37 AS cnt4#41, cd_dep_employed_count#33, count(1)#37 AS cnt5#42, cd_dep_college_count#34, count(1)#37 AS cnt6#43]

(51) TakeOrderedAndProject
Input [14]: [cd_gender#27, cd_marital_status#28, cd_education_status#29, cnt1#38, cd_purchase_estimate#30, cnt2#39, cd_credit_rating#31, cnt3#40, cd_dep_count#32, cnt4#41, cd_dep_employed_count#33, cnt5#42, cd_dep_college_count#34, cnt6#43]
Arguments: 100, [cd_gender#27 ASC NULLS FIRST, cd_marital_status#28 ASC NULLS FIRST, cd_education_status#29 ASC NULLS FIRST, cd_purchase_estimate#30 ASC NULLS FIRST, cd_credit_rating#31 ASC NULLS FIRST, cd_dep_count#32 ASC NULLS FIRST, cd_dep_employed_count#33 ASC NULLS FIRST, cd_dep_college_count#34 ASC NULLS FIRST], [cd_gender#27, cd_marital_status#28, cd_education_status#29, cnt1#38, cd_purchase_estimate#30, cnt2#39, cd_credit_rating#31, cnt3#40, cd_dep_count#32, cnt4#41, cd_dep_employed_count#33, cnt5#42, cd_dep_college_count#34, cnt6#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (56)
+- * ColumnarToRow (55)
   +- CometProject (54)
      +- CometFilter (53)
         +- CometScan parquet spark_catalog.default.date_dim (52)


(52) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2002), GreaterThanOrEqual(d_moy,1), LessThanOrEqual(d_moy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(53) CometFilter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : (((((isnotnull(d_year#10) AND isnotnull(d_moy#11)) AND (d_year#10 = 2002)) AND (d_moy#11 >= 1)) AND (d_moy#11 <= 4)) AND isnotnull(d_date_sk#9))

(54) CometProject
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Arguments: [d_date_sk#9], [d_date_sk#9]

(55) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#9]

(56) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 13 Hosting Expression = ws_sold_date_sk#13 IN dynamicpruning#8

Subquery:3 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#8


