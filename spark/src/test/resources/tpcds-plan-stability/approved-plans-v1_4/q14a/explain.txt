== Physical Plan ==
TakeOrderedAndProject (113)
+- * HashAggregate (112)
   +- Exchange (111)
      +- * HashAggregate (110)
         +- * Expand (109)
            +- Union (108)
               :- * Project (75)
               :  +- * Filter (74)
               :     +- * HashAggregate (73)
               :        +- Exchange (72)
               :           +- * HashAggregate (71)
               :              +- * Project (70)
               :                 +- * BroadcastHashJoin Inner BuildRight (69)
               :                    :- * Project (67)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (66)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (59)
               :                    :     :  :- * ColumnarToRow (3)
               :                    :     :  :  +- CometFilter (2)
               :                    :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :                    :     :  +- BroadcastExchange (58)
               :                    :     :     +- * Project (57)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (56)
               :                    :     :           :- * ColumnarToRow (6)
               :                    :     :           :  +- CometFilter (5)
               :                    :     :           :     +- CometScan parquet spark_catalog.default.item (4)
               :                    :     :           +- BroadcastExchange (55)
               :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (54)
               :                    :     :                 :- * HashAggregate (38)
               :                    :     :                 :  +- Exchange (37)
               :                    :     :                 :     +- * ColumnarToRow (36)
               :                    :     :                 :        +- CometHashAggregate (35)
               :                    :     :                 :           +- CometProject (34)
               :                    :     :                 :              +- CometBroadcastHashJoin (33)
               :                    :     :                 :                 :- CometProject (28)
               :                    :     :                 :                 :  +- CometBroadcastHashJoin (27)
               :                    :     :                 :                 :     :- CometFilter (8)
               :                    :     :                 :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (7)
               :                    :     :                 :                 :     +- CometBroadcastExchange (26)
               :                    :     :                 :                 :        +- CometBroadcastHashJoin (25)
               :                    :     :                 :                 :           :- CometFilter (10)
               :                    :     :                 :                 :           :  +- CometScan parquet spark_catalog.default.item (9)
               :                    :     :                 :                 :           +- CometBroadcastExchange (24)
               :                    :     :                 :                 :              +- CometProject (23)
               :                    :     :                 :                 :                 +- CometBroadcastHashJoin (22)
               :                    :     :                 :                 :                    :- CometProject (17)
               :                    :     :                 :                 :                    :  +- CometBroadcastHashJoin (16)
               :                    :     :                 :                 :                    :     :- CometFilter (12)
               :                    :     :                 :                 :                    :     :  +- CometScan parquet spark_catalog.default.catalog_sales (11)
               :                    :     :                 :                 :                    :     +- CometBroadcastExchange (15)
               :                    :     :                 :                 :                    :        +- CometFilter (14)
               :                    :     :                 :                 :                    :           +- CometScan parquet spark_catalog.default.item (13)
               :                    :     :                 :                 :                    +- CometBroadcastExchange (21)
               :                    :     :                 :                 :                       +- CometProject (20)
               :                    :     :                 :                 :                          +- CometFilter (19)
               :                    :     :                 :                 :                             +- CometScan parquet spark_catalog.default.date_dim (18)
               :                    :     :                 :                 +- CometBroadcastExchange (32)
               :                    :     :                 :                    +- CometProject (31)
               :                    :     :                 :                       +- CometFilter (30)
               :                    :     :                 :                          +- CometScan parquet spark_catalog.default.date_dim (29)
               :                    :     :                 +- BroadcastExchange (53)
               :                    :     :                    +- * ColumnarToRow (52)
               :                    :     :                       +- CometProject (51)
               :                    :     :                          +- CometBroadcastHashJoin (50)
               :                    :     :                             :- CometProject (45)
               :                    :     :                             :  +- CometBroadcastHashJoin (44)
               :                    :     :                             :     :- CometFilter (40)
               :                    :     :                             :     :  +- CometScan parquet spark_catalog.default.web_sales (39)
               :                    :     :                             :     +- CometBroadcastExchange (43)
               :                    :     :                             :        +- CometFilter (42)
               :                    :     :                             :           +- CometScan parquet spark_catalog.default.item (41)
               :                    :     :                             +- CometBroadcastExchange (49)
               :                    :     :                                +- CometProject (48)
               :                    :     :                                   +- CometFilter (47)
               :                    :     :                                      +- CometScan parquet spark_catalog.default.date_dim (46)
               :                    :     +- BroadcastExchange (65)
               :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (64)
               :                    :           :- * ColumnarToRow (62)
               :                    :           :  +- CometFilter (61)
               :                    :           :     +- CometScan parquet spark_catalog.default.item (60)
               :                    :           +- ReusedExchange (63)
               :                    +- ReusedExchange (68)
               :- * Project (91)
               :  +- * Filter (90)
               :     +- * HashAggregate (89)
               :        +- Exchange (88)
               :           +- * HashAggregate (87)
               :              +- * Project (86)
               :                 +- * BroadcastHashJoin Inner BuildRight (85)
               :                    :- * Project (83)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (82)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (80)
               :                    :     :  :- * ColumnarToRow (78)
               :                    :     :  :  +- CometFilter (77)
               :                    :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (76)
               :                    :     :  +- ReusedExchange (79)
               :                    :     +- ReusedExchange (81)
               :                    +- ReusedExchange (84)
               +- * Project (107)
                  +- * Filter (106)
                     +- * HashAggregate (105)
                        +- Exchange (104)
                           +- * HashAggregate (103)
                              +- * Project (102)
                                 +- * BroadcastHashJoin Inner BuildRight (101)
                                    :- * Project (99)
                                    :  +- * BroadcastHashJoin Inner BuildRight (98)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (96)
                                    :     :  :- * ColumnarToRow (94)
                                    :     :  :  +- CometFilter (93)
                                    :     :  :     +- CometScan parquet spark_catalog.default.web_sales (92)
                                    :     :  +- ReusedExchange (95)
                                    :     +- ReusedExchange (97)
                                    +- ReusedExchange (100)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 11]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(10) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(11) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(12) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(15) CometBroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(16) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Right output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner

(17) CometProject
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23], [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(19) CometFilter
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(20) CometProject
Input [2]: [d_date_sk#24, d_year#25]
Arguments: [d_date_sk#24], [d_date_sk#24]

(21) CometBroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: [d_date_sk#24]

(22) CometBroadcastHashJoin
Left output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#18], [d_date_sk#24], Inner

(23) CometProject
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23], [i_brand_id#21, i_class_id#22, i_category_id#23]

(24) CometBroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23]

(25) CometBroadcastHashJoin
Left output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)], [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)], LeftSemi

(26) CometBroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(27) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Right output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_item_sk#10], [i_item_sk#13], Inner

(28) CometProject
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16], [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]

(29) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(30) CometFilter
Input [2]: [d_date_sk#26, d_year#27]
Condition : (((isnotnull(d_year#27) AND (d_year#27 >= 1999)) AND (d_year#27 <= 2001)) AND isnotnull(d_date_sk#26))

(31) CometProject
Input [2]: [d_date_sk#26, d_year#27]
Arguments: [d_date_sk#26], [d_date_sk#26]

(32) CometBroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: [d_date_sk#26]

(33) CometBroadcastHashJoin
Left output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [1]: [d_date_sk#26]
Arguments: [ss_sold_date_sk#11], [d_date_sk#26], Inner

(34) CometProject
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#26]
Arguments: [brand_id#28, class_id#29, category_id#30], [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]

(35) CometHashAggregate
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []

(36) ColumnarToRow [codegen id : 1]
Input [3]: [brand_id#28, class_id#29, category_id#30]

(37) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(38) HashAggregate [codegen id : 3]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(39) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#32), dynamicpruningexpression(ws_sold_date_sk#32 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) CometFilter
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Condition : isnotnull(ws_item_sk#31)

(41) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(42) CometFilter
Input [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Condition : isnotnull(i_item_sk#34)

(43) CometBroadcastExchange
Input [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(44) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Right output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: [ws_item_sk#31], [i_item_sk#34], Inner

(45) CometProject
Input [6]: [ws_item_sk#31, ws_sold_date_sk#32, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37], [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#38, d_year#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(47) CometFilter
Input [2]: [d_date_sk#38, d_year#39]
Condition : (((isnotnull(d_year#39) AND (d_year#39 >= 1999)) AND (d_year#39 <= 2001)) AND isnotnull(d_date_sk#38))

(48) CometProject
Input [2]: [d_date_sk#38, d_year#39]
Arguments: [d_date_sk#38], [d_date_sk#38]

(49) CometBroadcastExchange
Input [1]: [d_date_sk#38]
Arguments: [d_date_sk#38]

(50) CometBroadcastHashJoin
Left output [4]: [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37]
Right output [1]: [d_date_sk#38]
Arguments: [ws_sold_date_sk#32], [d_date_sk#38], Inner

(51) CometProject
Input [5]: [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]
Arguments: [i_brand_id#35, i_class_id#36, i_category_id#37], [i_brand_id#35, i_class_id#36, i_category_id#37]

(52) ColumnarToRow [codegen id : 2]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(53) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(54) BroadcastHashJoin [codegen id : 3]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join type: LeftSemi
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=3]

(56) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join type: Inner
Join condition: None

(57) Project [codegen id : 4]
Output [1]: [i_item_sk#6 AS ss_item_sk#40]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(58) BroadcastExchange
Input [1]: [ss_item_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(59) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(60) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(61) CometFilter
Input [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]
Condition : isnotnull(i_item_sk#41)

(62) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]

(63) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#40]

(64) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#41]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(65) BroadcastExchange
Input [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(66) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#41]
Join type: Inner
Join condition: None

(67) Project [codegen id : 11]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#42, i_class_id#43, i_category_id#44]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]

(68) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#45]

(69) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#45]
Join type: Inner
Join condition: None

(70) Project [codegen id : 11]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#42, i_class_id#43, i_category_id#44]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#42, i_class_id#43, i_category_id#44, d_date_sk#45]

(71) HashAggregate [codegen id : 11]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#42, i_class_id#43, i_category_id#44]
Keys [3]: [i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#46, isEmpty#47, count#48]
Results [6]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum#49, isEmpty#50, count#51]

(72) Exchange
Input [6]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum#49, isEmpty#50, count#51]
Arguments: hashpartitioning(i_brand_id#42, i_class_id#43, i_category_id#44, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(73) HashAggregate [codegen id : 12]
Input [6]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum#49, isEmpty#50, count#51]
Keys [3]: [i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#52, count(1)#53]
Results [5]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#52 AS sales#54, count(1)#53 AS number_sales#55]

(74) Filter [codegen id : 12]
Input [5]: [i_brand_id#42, i_class_id#43, i_category_id#44, sales#54, number_sales#55]
Condition : (isnotnull(sales#54) AND (cast(sales#54 as decimal(32,6)) > cast(Subquery scalar-subquery#56, [id=#57] as decimal(32,6))))

(75) Project [codegen id : 12]
Output [6]: [sales#54, number_sales#55, store AS channel#58, i_brand_id#42 AS i_brand_id#59, i_class_id#43 AS i_class_id#60, i_category_id#44 AS i_category_id#61]
Input [5]: [i_brand_id#42, i_class_id#43, i_category_id#44, sales#54, number_sales#55]

(76) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#65), dynamicpruningexpression(cs_sold_date_sk#65 IN dynamicpruning#66)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(77) CometFilter
Input [4]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65]
Condition : isnotnull(cs_item_sk#62)

(78) ColumnarToRow [codegen id : 23]
Input [4]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65]

(79) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#40]

(80) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#62]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(81) ReusedExchange [Reuses operator id: 65]
Output [4]: [i_item_sk#67, i_brand_id#68, i_class_id#69, i_category_id#70]

(82) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#62]
Right keys [1]: [i_item_sk#67]
Join type: Inner
Join condition: None

(83) Project [codegen id : 23]
Output [6]: [cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [8]: [cs_item_sk#62, cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65, i_item_sk#67, i_brand_id#68, i_class_id#69, i_category_id#70]

(84) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#71]

(85) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#65]
Right keys [1]: [d_date_sk#71]
Join type: Inner
Join condition: None

(86) Project [codegen id : 23]
Output [5]: [cs_quantity#63, cs_list_price#64, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [7]: [cs_quantity#63, cs_list_price#64, cs_sold_date_sk#65, i_brand_id#68, i_class_id#69, i_category_id#70, d_date_sk#71]

(87) HashAggregate [codegen id : 23]
Input [5]: [cs_quantity#63, cs_list_price#64, i_brand_id#68, i_class_id#69, i_category_id#70]
Keys [3]: [i_brand_id#68, i_class_id#69, i_category_id#70]
Functions [2]: [partial_sum((cast(cs_quantity#63 as decimal(10,0)) * cs_list_price#64)), partial_count(1)]
Aggregate Attributes [3]: [sum#72, isEmpty#73, count#74]
Results [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]

(88) Exchange
Input [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]
Arguments: hashpartitioning(i_brand_id#68, i_class_id#69, i_category_id#70, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(89) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum#75, isEmpty#76, count#77]
Keys [3]: [i_brand_id#68, i_class_id#69, i_category_id#70]
Functions [2]: [sum((cast(cs_quantity#63 as decimal(10,0)) * cs_list_price#64)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#63 as decimal(10,0)) * cs_list_price#64))#78, count(1)#79]
Results [5]: [i_brand_id#68, i_class_id#69, i_category_id#70, sum((cast(cs_quantity#63 as decimal(10,0)) * cs_list_price#64))#78 AS sales#80, count(1)#79 AS number_sales#81]

(90) Filter [codegen id : 24]
Input [5]: [i_brand_id#68, i_class_id#69, i_category_id#70, sales#80, number_sales#81]
Condition : (isnotnull(sales#80) AND (cast(sales#80 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#56, [id=#57] as decimal(32,6))))

(91) Project [codegen id : 24]
Output [6]: [sales#80, number_sales#81, catalog AS channel#82, i_brand_id#68, i_class_id#69, i_category_id#70]
Input [5]: [i_brand_id#68, i_class_id#69, i_category_id#70, sales#80, number_sales#81]

(92) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#86), dynamicpruningexpression(ws_sold_date_sk#86 IN dynamicpruning#87)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(93) CometFilter
Input [4]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86]
Condition : isnotnull(ws_item_sk#83)

(94) ColumnarToRow [codegen id : 35]
Input [4]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86]

(95) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#40]

(96) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#83]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(97) ReusedExchange [Reuses operator id: 65]
Output [4]: [i_item_sk#88, i_brand_id#89, i_class_id#90, i_category_id#91]

(98) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#83]
Right keys [1]: [i_item_sk#88]
Join type: Inner
Join condition: None

(99) Project [codegen id : 35]
Output [6]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [8]: [ws_item_sk#83, ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86, i_item_sk#88, i_brand_id#89, i_class_id#90, i_category_id#91]

(100) ReusedExchange [Reuses operator id: 144]
Output [1]: [d_date_sk#92]

(101) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#86]
Right keys [1]: [d_date_sk#92]
Join type: Inner
Join condition: None

(102) Project [codegen id : 35]
Output [5]: [ws_quantity#84, ws_list_price#85, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [7]: [ws_quantity#84, ws_list_price#85, ws_sold_date_sk#86, i_brand_id#89, i_class_id#90, i_category_id#91, d_date_sk#92]

(103) HashAggregate [codegen id : 35]
Input [5]: [ws_quantity#84, ws_list_price#85, i_brand_id#89, i_class_id#90, i_category_id#91]
Keys [3]: [i_brand_id#89, i_class_id#90, i_category_id#91]
Functions [2]: [partial_sum((cast(ws_quantity#84 as decimal(10,0)) * ws_list_price#85)), partial_count(1)]
Aggregate Attributes [3]: [sum#93, isEmpty#94, count#95]
Results [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]

(104) Exchange
Input [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]
Arguments: hashpartitioning(i_brand_id#89, i_class_id#90, i_category_id#91, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(105) HashAggregate [codegen id : 36]
Input [6]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum#96, isEmpty#97, count#98]
Keys [3]: [i_brand_id#89, i_class_id#90, i_category_id#91]
Functions [2]: [sum((cast(ws_quantity#84 as decimal(10,0)) * ws_list_price#85)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#84 as decimal(10,0)) * ws_list_price#85))#99, count(1)#100]
Results [5]: [i_brand_id#89, i_class_id#90, i_category_id#91, sum((cast(ws_quantity#84 as decimal(10,0)) * ws_list_price#85))#99 AS sales#101, count(1)#100 AS number_sales#102]

(106) Filter [codegen id : 36]
Input [5]: [i_brand_id#89, i_class_id#90, i_category_id#91, sales#101, number_sales#102]
Condition : (isnotnull(sales#101) AND (cast(sales#101 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#56, [id=#57] as decimal(32,6))))

(107) Project [codegen id : 36]
Output [6]: [sales#101, number_sales#102, web AS channel#103, i_brand_id#89, i_class_id#90, i_category_id#91]
Input [5]: [i_brand_id#89, i_class_id#90, i_category_id#91, sales#101, number_sales#102]

(108) Union

(109) Expand [codegen id : 37]
Input [6]: [sales#54, number_sales#55, channel#58, i_brand_id#59, i_class_id#60, i_category_id#61]
Arguments: [[sales#54, number_sales#55, channel#58, i_brand_id#59, i_class_id#60, i_category_id#61, 0], [sales#54, number_sales#55, channel#58, i_brand_id#59, i_class_id#60, null, 1], [sales#54, number_sales#55, channel#58, i_brand_id#59, null, null, 3], [sales#54, number_sales#55, channel#58, null, null, null, 7], [sales#54, number_sales#55, null, null, null, null, 15]], [sales#54, number_sales#55, channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108]

(110) HashAggregate [codegen id : 37]
Input [7]: [sales#54, number_sales#55, channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108]
Keys [5]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108]
Functions [2]: [partial_sum(sales#54), partial_sum(number_sales#55)]
Aggregate Attributes [3]: [sum#109, isEmpty#110, sum#111]
Results [8]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108, sum#112, isEmpty#113, sum#114]

(111) Exchange
Input [8]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108, sum#112, isEmpty#113, sum#114]
Arguments: hashpartitioning(channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(112) HashAggregate [codegen id : 38]
Input [8]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108, sum#112, isEmpty#113, sum#114]
Keys [5]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, spark_grouping_id#108]
Functions [2]: [sum(sales#54), sum(number_sales#55)]
Aggregate Attributes [2]: [sum(sales#54)#115, sum(number_sales#55)#116]
Results [6]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, sum(sales#54)#115 AS sum(sales)#117, sum(number_sales#55)#116 AS sum(number_sales)#118]

(113) TakeOrderedAndProject
Input [6]: [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, sum(sales)#117, sum(number_sales)#118]
Arguments: 100, [channel#104 ASC NULLS FIRST, i_brand_id#105 ASC NULLS FIRST, i_class_id#106 ASC NULLS FIRST, i_category_id#107 ASC NULLS FIRST], [channel#104, i_brand_id#105, i_class_id#106, i_category_id#107, sum(sales)#117, sum(number_sales)#118]

===== Subqueries =====

Subquery:1 Hosting operator id = 74 Hosting Expression = Subquery scalar-subquery#56, [id=#57]
* HashAggregate (139)
+- Exchange (138)
   +- * ColumnarToRow (137)
      +- CometHashAggregate (136)
         +- CometUnion (135)
            :- CometProject (120)
            :  +- CometBroadcastHashJoin (119)
            :     :- CometScan parquet spark_catalog.default.store_sales (114)
            :     +- CometBroadcastExchange (118)
            :        +- CometProject (117)
            :           +- CometFilter (116)
            :              +- CometScan parquet spark_catalog.default.date_dim (115)
            :- CometProject (127)
            :  +- CometBroadcastHashJoin (126)
            :     :- CometScan parquet spark_catalog.default.catalog_sales (121)
            :     +- CometBroadcastExchange (125)
            :        +- CometProject (124)
            :           +- CometFilter (123)
            :              +- CometScan parquet spark_catalog.default.date_dim (122)
            +- CometProject (134)
               +- CometBroadcastHashJoin (133)
                  :- CometScan parquet spark_catalog.default.web_sales (128)
                  +- CometBroadcastExchange (132)
                     +- CometProject (131)
                        +- CometFilter (130)
                           +- CometScan parquet spark_catalog.default.date_dim (129)


(114) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#119, ss_list_price#120, ss_sold_date_sk#121]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#121), dynamicpruningexpression(ss_sold_date_sk#121 IN dynamicpruning#122)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(115) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#123, d_year#124]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(116) CometFilter
Input [2]: [d_date_sk#123, d_year#124]
Condition : (((isnotnull(d_year#124) AND (d_year#124 >= 1999)) AND (d_year#124 <= 2001)) AND isnotnull(d_date_sk#123))

(117) CometProject
Input [2]: [d_date_sk#123, d_year#124]
Arguments: [d_date_sk#123], [d_date_sk#123]

(118) CometBroadcastExchange
Input [1]: [d_date_sk#123]
Arguments: [d_date_sk#123]

(119) CometBroadcastHashJoin
Left output [3]: [ss_quantity#119, ss_list_price#120, ss_sold_date_sk#121]
Right output [1]: [d_date_sk#123]
Arguments: [ss_sold_date_sk#121], [d_date_sk#123], Inner

(120) CometProject
Input [4]: [ss_quantity#119, ss_list_price#120, ss_sold_date_sk#121, d_date_sk#123]
Arguments: [quantity#125, list_price#126], [ss_quantity#119 AS quantity#125, ss_list_price#120 AS list_price#126]

(121) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#127, cs_list_price#128, cs_sold_date_sk#129]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#129), dynamicpruningexpression(cs_sold_date_sk#129 IN dynamicpruning#130)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(122) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#131, d_year#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(123) CometFilter
Input [2]: [d_date_sk#131, d_year#132]
Condition : (((isnotnull(d_year#132) AND (d_year#132 >= 1999)) AND (d_year#132 <= 2001)) AND isnotnull(d_date_sk#131))

(124) CometProject
Input [2]: [d_date_sk#131, d_year#132]
Arguments: [d_date_sk#131], [d_date_sk#131]

(125) CometBroadcastExchange
Input [1]: [d_date_sk#131]
Arguments: [d_date_sk#131]

(126) CometBroadcastHashJoin
Left output [3]: [cs_quantity#127, cs_list_price#128, cs_sold_date_sk#129]
Right output [1]: [d_date_sk#131]
Arguments: [cs_sold_date_sk#129], [d_date_sk#131], Inner

(127) CometProject
Input [4]: [cs_quantity#127, cs_list_price#128, cs_sold_date_sk#129, d_date_sk#131]
Arguments: [quantity#133, list_price#134], [cs_quantity#127 AS quantity#133, cs_list_price#128 AS list_price#134]

(128) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#135, ws_list_price#136, ws_sold_date_sk#137]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#137), dynamicpruningexpression(ws_sold_date_sk#137 IN dynamicpruning#138)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(129) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#139, d_year#140]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(130) CometFilter
Input [2]: [d_date_sk#139, d_year#140]
Condition : (((isnotnull(d_year#140) AND (d_year#140 >= 1999)) AND (d_year#140 <= 2001)) AND isnotnull(d_date_sk#139))

(131) CometProject
Input [2]: [d_date_sk#139, d_year#140]
Arguments: [d_date_sk#139], [d_date_sk#139]

(132) CometBroadcastExchange
Input [1]: [d_date_sk#139]
Arguments: [d_date_sk#139]

(133) CometBroadcastHashJoin
Left output [3]: [ws_quantity#135, ws_list_price#136, ws_sold_date_sk#137]
Right output [1]: [d_date_sk#139]
Arguments: [ws_sold_date_sk#137], [d_date_sk#139], Inner

(134) CometProject
Input [4]: [ws_quantity#135, ws_list_price#136, ws_sold_date_sk#137, d_date_sk#139]
Arguments: [quantity#141, list_price#142], [ws_quantity#135 AS quantity#141, ws_list_price#136 AS list_price#142]

(135) CometUnion
Child 0 Input [2]: [quantity#125, list_price#126]
Child 1 Input [2]: [quantity#133, list_price#134]
Child 2 Input [2]: [quantity#141, list_price#142]

(136) CometHashAggregate
Input [2]: [quantity#125, list_price#126]
Keys: []
Functions [1]: [partial_avg((cast(quantity#125 as decimal(10,0)) * list_price#126))]

(137) ColumnarToRow [codegen id : 1]
Input [2]: [sum#143, count#144]

(138) Exchange
Input [2]: [sum#143, count#144]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(139) HashAggregate [codegen id : 2]
Input [2]: [sum#143, count#144]
Keys: []
Functions [1]: [avg((cast(quantity#125 as decimal(10,0)) * list_price#126))]
Aggregate Attributes [1]: [avg((cast(quantity#125 as decimal(10,0)) * list_price#126))#145]
Results [1]: [avg((cast(quantity#125 as decimal(10,0)) * list_price#126))#145 AS average_sales#146]

Subquery:2 Hosting operator id = 114 Hosting Expression = ss_sold_date_sk#121 IN dynamicpruning#12

Subquery:3 Hosting operator id = 121 Hosting Expression = cs_sold_date_sk#129 IN dynamicpruning#12

Subquery:4 Hosting operator id = 128 Hosting Expression = ws_sold_date_sk#137 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (144)
+- * ColumnarToRow (143)
   +- CometProject (142)
      +- CometFilter (141)
         +- CometScan parquet spark_catalog.default.date_dim (140)


(140) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#45, d_year#147, d_moy#148]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(141) CometFilter
Input [3]: [d_date_sk#45, d_year#147, d_moy#148]
Condition : ((((isnotnull(d_year#147) AND isnotnull(d_moy#148)) AND (d_year#147 = 2001)) AND (d_moy#148 = 11)) AND isnotnull(d_date_sk#45))

(142) CometProject
Input [3]: [d_date_sk#45, d_year#147, d_moy#148]
Arguments: [d_date_sk#45], [d_date_sk#45]

(143) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#45]

(144) BroadcastExchange
Input [1]: [d_date_sk#45]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (149)
+- * ColumnarToRow (148)
   +- CometProject (147)
      +- CometFilter (146)
         +- CometScan parquet spark_catalog.default.date_dim (145)


(145) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(146) CometFilter
Input [2]: [d_date_sk#26, d_year#27]
Condition : (((isnotnull(d_year#27) AND (d_year#27 >= 1999)) AND (d_year#27 <= 2001)) AND isnotnull(d_date_sk#26))

(147) CometProject
Input [2]: [d_date_sk#26, d_year#27]
Arguments: [d_date_sk#26], [d_date_sk#26]

(148) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#26]

(149) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:7 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#32 IN dynamicpruning#12

Subquery:9 Hosting operator id = 90 Hosting Expression = ReusedSubquery Subquery scalar-subquery#56, [id=#57]

Subquery:10 Hosting operator id = 76 Hosting Expression = cs_sold_date_sk#65 IN dynamicpruning#5

Subquery:11 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#56, [id=#57]

Subquery:12 Hosting operator id = 92 Hosting Expression = ws_sold_date_sk#86 IN dynamicpruning#5


