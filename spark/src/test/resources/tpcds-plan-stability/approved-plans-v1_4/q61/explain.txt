== Physical Plan ==
* Project (79)
+- * BroadcastNestedLoopJoin Inner BuildRight (78)
   :- * HashAggregate (41)
   :  +- Exchange (40)
   :     +- * ColumnarToRow (39)
   :        +- CometHashAggregate (38)
   :           +- CometProject (37)
   :              +- CometBroadcastHashJoin (36)
   :                 :- CometProject (31)
   :                 :  +- CometBroadcastHashJoin (30)
   :                 :     :- CometProject (25)
   :                 :     :  +- CometBroadcastHashJoin (24)
   :                 :     :     :- CometProject (20)
   :                 :     :     :  +- CometBroadcastHashJoin (19)
   :                 :     :     :     :- CometProject (14)
   :                 :     :     :     :  +- CometBroadcastHashJoin (13)
   :                 :     :     :     :     :- CometProject (8)
   :                 :     :     :     :     :  +- CometBroadcastHashJoin (7)
   :                 :     :     :     :     :     :- CometFilter (2)
   :                 :     :     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
   :                 :     :     :     :     :     +- CometBroadcastExchange (6)
   :                 :     :     :     :     :        +- CometProject (5)
   :                 :     :     :     :     :           +- CometFilter (4)
   :                 :     :     :     :     :              +- CometScan parquet spark_catalog.default.store (3)
   :                 :     :     :     :     +- CometBroadcastExchange (12)
   :                 :     :     :     :        +- CometProject (11)
   :                 :     :     :     :           +- CometFilter (10)
   :                 :     :     :     :              +- CometScan parquet spark_catalog.default.promotion (9)
   :                 :     :     :     +- CometBroadcastExchange (18)
   :                 :     :     :        +- CometProject (17)
   :                 :     :     :           +- CometFilter (16)
   :                 :     :     :              +- CometScan parquet spark_catalog.default.date_dim (15)
   :                 :     :     +- CometBroadcastExchange (23)
   :                 :     :        +- CometFilter (22)
   :                 :     :           +- CometScan parquet spark_catalog.default.customer (21)
   :                 :     +- CometBroadcastExchange (29)
   :                 :        +- CometProject (28)
   :                 :           +- CometFilter (27)
   :                 :              +- CometScan parquet spark_catalog.default.customer_address (26)
   :                 +- CometBroadcastExchange (35)
   :                    +- CometProject (34)
   :                       +- CometFilter (33)
   :                          +- CometScan parquet spark_catalog.default.item (32)
   +- BroadcastExchange (77)
      +- * HashAggregate (76)
         +- Exchange (75)
            +- * ColumnarToRow (74)
               +- CometHashAggregate (73)
                  +- CometProject (72)
                     +- CometBroadcastHashJoin (71)
                        :- CometProject (66)
                        :  +- CometBroadcastHashJoin (65)
                        :     :- CometProject (60)
                        :     :  +- CometBroadcastHashJoin (59)
                        :     :     :- CometProject (55)
                        :     :     :  +- CometBroadcastHashJoin (54)
                        :     :     :     :- CometProject (49)
                        :     :     :     :  +- CometBroadcastHashJoin (48)
                        :     :     :     :     :- CometFilter (43)
                        :     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (42)
                        :     :     :     :     +- CometBroadcastExchange (47)
                        :     :     :     :        +- CometProject (46)
                        :     :     :     :           +- CometFilter (45)
                        :     :     :     :              +- CometScan parquet spark_catalog.default.store (44)
                        :     :     :     +- CometBroadcastExchange (53)
                        :     :     :        +- CometProject (52)
                        :     :     :           +- CometFilter (51)
                        :     :     :              +- CometScan parquet spark_catalog.default.date_dim (50)
                        :     :     +- CometBroadcastExchange (58)
                        :     :        +- CometFilter (57)
                        :     :           +- CometScan parquet spark_catalog.default.customer (56)
                        :     +- CometBroadcastExchange (64)
                        :        +- CometProject (63)
                        :           +- CometFilter (62)
                        :              +- CometScan parquet spark_catalog.default.customer_address (61)
                        +- CometBroadcastExchange (70)
                           +- CometProject (69)
                              +- CometFilter (68)
                                 +- CometScan parquet spark_catalog.default.item (67)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_promo_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_store_sk#3) AND isnotnull(ss_promo_sk#4)) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_item_sk#1))

(3) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#8, s_gmt_offset#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_gmt_offset:decimal(5,2)>

(4) CometFilter
Input [2]: [s_store_sk#8, s_gmt_offset#9]
Condition : ((isnotnull(s_gmt_offset#9) AND (s_gmt_offset#9 = -5.00)) AND isnotnull(s_store_sk#8))

(5) CometProject
Input [2]: [s_store_sk#8, s_gmt_offset#9]
Arguments: [s_store_sk#8], [s_store_sk#8]

(6) CometBroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: [s_store_sk#8]

(7) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [s_store_sk#8]
Arguments: [ss_store_sk#3], [s_store_sk#8], Inner

(8) CometProject
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6, s_store_sk#8]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6], [ss_item_sk#1, ss_customer_sk#2, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]

(9) Scan parquet spark_catalog.default.promotion
Output [4]: [p_promo_sk#10, p_channel_dmail#11, p_channel_email#12, p_channel_tv#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [Or(Or(EqualTo(p_channel_dmail,Y),EqualTo(p_channel_email,Y)),EqualTo(p_channel_tv,Y)), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_dmail:string,p_channel_email:string,p_channel_tv:string>

(10) CometFilter
Input [4]: [p_promo_sk#10, p_channel_dmail#11, p_channel_email#12, p_channel_tv#13]
Condition : ((((p_channel_dmail#11 = Y) OR (p_channel_email#12 = Y)) OR (p_channel_tv#13 = Y)) AND isnotnull(p_promo_sk#10))

(11) CometProject
Input [4]: [p_promo_sk#10, p_channel_dmail#11, p_channel_email#12, p_channel_tv#13]
Arguments: [p_promo_sk#10], [p_promo_sk#10]

(12) CometBroadcastExchange
Input [1]: [p_promo_sk#10]
Arguments: [p_promo_sk#10]

(13) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [p_promo_sk#10]
Arguments: [ss_promo_sk#4], [p_promo_sk#10], Inner

(14) CometProject
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_promo_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6, p_promo_sk#10]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5, ss_sold_date_sk#6], [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5, ss_sold_date_sk#6]

(15) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#14, d_year#15, d_moy#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(16) CometFilter
Input [3]: [d_date_sk#14, d_year#15, d_moy#16]
Condition : ((((isnotnull(d_year#15) AND isnotnull(d_moy#16)) AND (d_year#15 = 1998)) AND (d_moy#16 = 11)) AND isnotnull(d_date_sk#14))

(17) CometProject
Input [3]: [d_date_sk#14, d_year#15, d_moy#16]
Arguments: [d_date_sk#14], [d_date_sk#14]

(18) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(19) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#6], [d_date_sk#14], Inner

(20) CometProject
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5, ss_sold_date_sk#6, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5], [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5]

(21) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#17, c_current_addr_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(22) CometFilter
Input [2]: [c_customer_sk#17, c_current_addr_sk#18]
Condition : (isnotnull(c_customer_sk#17) AND isnotnull(c_current_addr_sk#18))

(23) CometBroadcastExchange
Input [2]: [c_customer_sk#17, c_current_addr_sk#18]
Arguments: [c_customer_sk#17, c_current_addr_sk#18]

(24) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5]
Right output [2]: [c_customer_sk#17, c_current_addr_sk#18]
Arguments: [ss_customer_sk#2], [c_customer_sk#17], Inner

(25) CometProject
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_ext_sales_price#5, c_customer_sk#17, c_current_addr_sk#18]
Arguments: [ss_item_sk#1, ss_ext_sales_price#5, c_current_addr_sk#18], [ss_item_sk#1, ss_ext_sales_price#5, c_current_addr_sk#18]

(26) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#19, ca_gmt_offset#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(27) CometFilter
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]
Condition : ((isnotnull(ca_gmt_offset#20) AND (ca_gmt_offset#20 = -5.00)) AND isnotnull(ca_address_sk#19))

(28) CometProject
Input [2]: [ca_address_sk#19, ca_gmt_offset#20]
Arguments: [ca_address_sk#19], [ca_address_sk#19]

(29) CometBroadcastExchange
Input [1]: [ca_address_sk#19]
Arguments: [ca_address_sk#19]

(30) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#5, c_current_addr_sk#18]
Right output [1]: [ca_address_sk#19]
Arguments: [c_current_addr_sk#18], [ca_address_sk#19], Inner

(31) CometProject
Input [4]: [ss_item_sk#1, ss_ext_sales_price#5, c_current_addr_sk#18, ca_address_sk#19]
Arguments: [ss_item_sk#1, ss_ext_sales_price#5], [ss_item_sk#1, ss_ext_sales_price#5]

(32) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#21, i_category#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry                                           ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(33) CometFilter
Input [2]: [i_item_sk#21, i_category#22]
Condition : ((isnotnull(i_category#22) AND (i_category#22 = Jewelry                                           )) AND isnotnull(i_item_sk#21))

(34) CometProject
Input [2]: [i_item_sk#21, i_category#22]
Arguments: [i_item_sk#21], [i_item_sk#21]

(35) CometBroadcastExchange
Input [1]: [i_item_sk#21]
Arguments: [i_item_sk#21]

(36) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#1, ss_ext_sales_price#5]
Right output [1]: [i_item_sk#21]
Arguments: [ss_item_sk#1], [i_item_sk#21], Inner

(37) CometProject
Input [3]: [ss_item_sk#1, ss_ext_sales_price#5, i_item_sk#21]
Arguments: [ss_ext_sales_price#5], [ss_ext_sales_price#5]

(38) CometHashAggregate
Input [1]: [ss_ext_sales_price#5]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]

(39) ColumnarToRow [codegen id : 1]
Input [1]: [sum#23]

(40) Exchange
Input [1]: [sum#23]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1]

(41) HashAggregate [codegen id : 4]
Input [1]: [sum#23]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#24]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#24,17,2) AS promotions#25]

(42) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#26, ss_customer_sk#27, ss_store_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(43) CometFilter
Input [5]: [ss_item_sk#26, ss_customer_sk#27, ss_store_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Condition : ((isnotnull(ss_store_sk#28) AND isnotnull(ss_customer_sk#27)) AND isnotnull(ss_item_sk#26))

(44) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#32, s_gmt_offset#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_gmt_offset:decimal(5,2)>

(45) CometFilter
Input [2]: [s_store_sk#32, s_gmt_offset#33]
Condition : ((isnotnull(s_gmt_offset#33) AND (s_gmt_offset#33 = -5.00)) AND isnotnull(s_store_sk#32))

(46) CometProject
Input [2]: [s_store_sk#32, s_gmt_offset#33]
Arguments: [s_store_sk#32], [s_store_sk#32]

(47) CometBroadcastExchange
Input [1]: [s_store_sk#32]
Arguments: [s_store_sk#32]

(48) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#26, ss_customer_sk#27, ss_store_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Right output [1]: [s_store_sk#32]
Arguments: [ss_store_sk#28], [s_store_sk#32], Inner

(49) CometProject
Input [6]: [ss_item_sk#26, ss_customer_sk#27, ss_store_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30, s_store_sk#32]
Arguments: [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29, ss_sold_date_sk#30], [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29, ss_sold_date_sk#30]

(50) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#34, d_year#35, d_moy#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(51) CometFilter
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]
Condition : ((((isnotnull(d_year#35) AND isnotnull(d_moy#36)) AND (d_year#35 = 1998)) AND (d_moy#36 = 11)) AND isnotnull(d_date_sk#34))

(52) CometProject
Input [3]: [d_date_sk#34, d_year#35, d_moy#36]
Arguments: [d_date_sk#34], [d_date_sk#34]

(53) CometBroadcastExchange
Input [1]: [d_date_sk#34]
Arguments: [d_date_sk#34]

(54) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29, ss_sold_date_sk#30]
Right output [1]: [d_date_sk#34]
Arguments: [ss_sold_date_sk#30], [d_date_sk#34], Inner

(55) CometProject
Input [5]: [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29, ss_sold_date_sk#30, d_date_sk#34]
Arguments: [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29], [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29]

(56) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#37, c_current_addr_sk#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(57) CometFilter
Input [2]: [c_customer_sk#37, c_current_addr_sk#38]
Condition : (isnotnull(c_customer_sk#37) AND isnotnull(c_current_addr_sk#38))

(58) CometBroadcastExchange
Input [2]: [c_customer_sk#37, c_current_addr_sk#38]
Arguments: [c_customer_sk#37, c_current_addr_sk#38]

(59) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29]
Right output [2]: [c_customer_sk#37, c_current_addr_sk#38]
Arguments: [ss_customer_sk#27], [c_customer_sk#37], Inner

(60) CometProject
Input [5]: [ss_item_sk#26, ss_customer_sk#27, ss_ext_sales_price#29, c_customer_sk#37, c_current_addr_sk#38]
Arguments: [ss_item_sk#26, ss_ext_sales_price#29, c_current_addr_sk#38], [ss_item_sk#26, ss_ext_sales_price#29, c_current_addr_sk#38]

(61) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#39, ca_gmt_offset#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(62) CometFilter
Input [2]: [ca_address_sk#39, ca_gmt_offset#40]
Condition : ((isnotnull(ca_gmt_offset#40) AND (ca_gmt_offset#40 = -5.00)) AND isnotnull(ca_address_sk#39))

(63) CometProject
Input [2]: [ca_address_sk#39, ca_gmt_offset#40]
Arguments: [ca_address_sk#39], [ca_address_sk#39]

(64) CometBroadcastExchange
Input [1]: [ca_address_sk#39]
Arguments: [ca_address_sk#39]

(65) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#26, ss_ext_sales_price#29, c_current_addr_sk#38]
Right output [1]: [ca_address_sk#39]
Arguments: [c_current_addr_sk#38], [ca_address_sk#39], Inner

(66) CometProject
Input [4]: [ss_item_sk#26, ss_ext_sales_price#29, c_current_addr_sk#38, ca_address_sk#39]
Arguments: [ss_item_sk#26, ss_ext_sales_price#29], [ss_item_sk#26, ss_ext_sales_price#29]

(67) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#41, i_category#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Jewelry                                           ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(68) CometFilter
Input [2]: [i_item_sk#41, i_category#42]
Condition : ((isnotnull(i_category#42) AND (i_category#42 = Jewelry                                           )) AND isnotnull(i_item_sk#41))

(69) CometProject
Input [2]: [i_item_sk#41, i_category#42]
Arguments: [i_item_sk#41], [i_item_sk#41]

(70) CometBroadcastExchange
Input [1]: [i_item_sk#41]
Arguments: [i_item_sk#41]

(71) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#26, ss_ext_sales_price#29]
Right output [1]: [i_item_sk#41]
Arguments: [ss_item_sk#26], [i_item_sk#41], Inner

(72) CometProject
Input [3]: [ss_item_sk#26, ss_ext_sales_price#29, i_item_sk#41]
Arguments: [ss_ext_sales_price#29], [ss_ext_sales_price#29]

(73) CometHashAggregate
Input [1]: [ss_ext_sales_price#29]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#29))]

(74) ColumnarToRow [codegen id : 2]
Input [1]: [sum#43]

(75) Exchange
Input [1]: [sum#43]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=2]

(76) HashAggregate [codegen id : 3]
Input [1]: [sum#43]
Keys: []
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#29))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#29))#44]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#29))#44,17,2) AS total#45]

(77) BroadcastExchange
Input [1]: [total#45]
Arguments: IdentityBroadcastMode, [plan_id=3]

(78) BroadcastNestedLoopJoin [codegen id : 4]
Join type: Inner
Join condition: None

(79) Project [codegen id : 4]
Output [3]: [promotions#25, total#45, ((cast(promotions#25 as decimal(15,4)) / cast(total#45 as decimal(15,4))) * 100) AS ((CAST(promotions AS DECIMAL(15,4)) / CAST(total AS DECIMAL(15,4))) * 100)#46]
Input [2]: [promotions#25, total#45]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (84)
+- * ColumnarToRow (83)
   +- CometProject (82)
      +- CometFilter (81)
         +- CometScan parquet spark_catalog.default.date_dim (80)


(80) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#14, d_year#15, d_moy#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(81) CometFilter
Input [3]: [d_date_sk#14, d_year#15, d_moy#16]
Condition : ((((isnotnull(d_year#15) AND isnotnull(d_moy#16)) AND (d_year#15 = 1998)) AND (d_moy#16 = 11)) AND isnotnull(d_date_sk#14))

(82) CometProject
Input [3]: [d_date_sk#14, d_year#15, d_moy#16]
Arguments: [d_date_sk#14], [d_date_sk#14]

(83) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(84) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 42 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#7


