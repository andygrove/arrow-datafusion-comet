== Physical Plan ==
TakeOrderedAndProject (67)
+- * Project (66)
   +- * BroadcastHashJoin Inner BuildRight (65)
      :- * Project (43)
      :  +- * BroadcastHashJoin Inner BuildRight (42)
      :     :- * Filter (20)
      :     :  +- * HashAggregate (19)
      :     :     +- Exchange (18)
      :     :        +- * ColumnarToRow (17)
      :     :           +- CometHashAggregate (16)
      :     :              +- CometProject (15)
      :     :                 +- CometBroadcastHashJoin (14)
      :     :                    :- CometProject (7)
      :     :                    :  +- CometBroadcastHashJoin (6)
      :     :                    :     :- CometFilter (2)
      :     :                    :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :     :                    :     +- CometBroadcastExchange (5)
      :     :                    :        +- CometFilter (4)
      :     :                    :           +- CometScan parquet spark_catalog.default.item (3)
      :     :                    +- CometBroadcastExchange (13)
      :     :                       +- CometProject (12)
      :     :                          +- CometBroadcastHashJoin (11)
      :     :                             :- CometFilter (9)
      :     :                             :  +- CometScan parquet spark_catalog.default.date_dim (8)
      :     :                             +- ReusedExchange (10)
      :     +- BroadcastExchange (41)
      :        +- * Filter (40)
      :           +- * HashAggregate (39)
      :              +- Exchange (38)
      :                 +- * ColumnarToRow (37)
      :                    +- CometHashAggregate (36)
      :                       +- CometProject (35)
      :                          +- CometBroadcastHashJoin (34)
      :                             :- CometProject (27)
      :                             :  +- CometBroadcastHashJoin (26)
      :                             :     :- CometFilter (22)
      :                             :     :  +- CometScan parquet spark_catalog.default.catalog_sales (21)
      :                             :     +- CometBroadcastExchange (25)
      :                             :        +- CometFilter (24)
      :                             :           +- CometScan parquet spark_catalog.default.item (23)
      :                             +- CometBroadcastExchange (33)
      :                                +- CometProject (32)
      :                                   +- CometBroadcastHashJoin (31)
      :                                      :- CometFilter (29)
      :                                      :  +- CometScan parquet spark_catalog.default.date_dim (28)
      :                                      +- ReusedExchange (30)
      +- BroadcastExchange (64)
         +- * Filter (63)
            +- * HashAggregate (62)
               +- Exchange (61)
                  +- * ColumnarToRow (60)
                     +- CometHashAggregate (59)
                        +- CometProject (58)
                           +- CometBroadcastHashJoin (57)
                              :- CometProject (50)
                              :  +- CometBroadcastHashJoin (49)
                              :     :- CometFilter (45)
                              :     :  +- CometScan parquet spark_catalog.default.web_sales (44)
                              :     +- CometBroadcastExchange (48)
                              :        +- CometFilter (47)
                              :           +- CometScan parquet spark_catalog.default.item (46)
                              +- CometBroadcastExchange (56)
                                 +- CometProject (55)
                                    +- CometBroadcastHashJoin (54)
                                       :- CometFilter (52)
                                       :  +- CometScan parquet spark_catalog.default.date_dim (51)
                                       +- ReusedExchange (53)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(i_item_id#6))

(5) CometBroadcastExchange
Input [2]: [i_item_sk#5, i_item_id#6]
Arguments: [i_item_sk#5, i_item_id#6]

(6) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#5, i_item_id#6]
Arguments: [ss_item_sk#1], [i_item_sk#5], Inner

(7) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#6]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]

(8) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(9) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(10) ReusedExchange [Reuses operator id: 73]
Output [1]: [d_date#9]

(11) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#9]
Arguments: [d_date#8], [d_date#9], LeftSemi

(12) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(13) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(14) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#7], Inner

(15) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]
Arguments: [ss_ext_sales_price#2, i_item_id#6], [ss_ext_sales_price#2, i_item_id#6]

(16) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(17) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_id#6, sum#10]

(18) Exchange
Input [2]: [i_item_id#6, sum#10]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(19) HashAggregate [codegen id : 6]
Input [2]: [i_item_id#6, sum#10]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#11]
Results [2]: [i_item_id#6 AS item_id#12, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#11,17,2) AS ss_item_rev#13]

(20) Filter [codegen id : 6]
Input [2]: [item_id#12, ss_item_rev#13]
Condition : isnotnull(ss_item_rev#13)

(21) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#17)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(22) CometFilter
Input [3]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#14)

(23) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(24) CometFilter
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : (isnotnull(i_item_sk#18) AND isnotnull(i_item_id#19))

(25) CometBroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: [i_item_sk#18, i_item_id#19]

(26) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16]
Right output [2]: [i_item_sk#18, i_item_id#19]
Arguments: [cs_item_sk#14], [i_item_sk#18], Inner

(27) CometProject
Input [5]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_sk#18, i_item_id#19]
Arguments: [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19], [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19]

(28) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#20, d_date#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(29) CometFilter
Input [2]: [d_date_sk#20, d_date#21]
Condition : isnotnull(d_date_sk#20)

(30) ReusedExchange [Reuses operator id: 87]
Output [1]: [d_date#22]

(31) CometBroadcastHashJoin
Left output [2]: [d_date_sk#20, d_date#21]
Right output [1]: [d_date#22]
Arguments: [d_date#21], [d_date#22], LeftSemi

(32) CometProject
Input [2]: [d_date_sk#20, d_date#21]
Arguments: [d_date_sk#20], [d_date_sk#20]

(33) CometBroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: [d_date_sk#20]

(34) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19]
Right output [1]: [d_date_sk#20]
Arguments: [cs_sold_date_sk#16], [d_date_sk#20], Inner

(35) CometProject
Input [4]: [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19, d_date_sk#20]
Arguments: [cs_ext_sales_price#15, i_item_id#19], [cs_ext_sales_price#15, i_item_id#19]

(36) CometHashAggregate
Input [2]: [cs_ext_sales_price#15, i_item_id#19]
Keys [1]: [i_item_id#19]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#15))]

(37) ColumnarToRow [codegen id : 2]
Input [2]: [i_item_id#19, sum#23]

(38) Exchange
Input [2]: [i_item_id#19, sum#23]
Arguments: hashpartitioning(i_item_id#19, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(39) HashAggregate [codegen id : 3]
Input [2]: [i_item_id#19, sum#23]
Keys [1]: [i_item_id#19]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#15))#24]
Results [2]: [i_item_id#19 AS item_id#25, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#15))#24,17,2) AS cs_item_rev#26]

(40) Filter [codegen id : 3]
Input [2]: [item_id#25, cs_item_rev#26]
Condition : isnotnull(cs_item_rev#26)

(41) BroadcastExchange
Input [2]: [item_id#25, cs_item_rev#26]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(42) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [item_id#12]
Right keys [1]: [item_id#25]
Join type: Inner
Join condition: ((((cast(ss_item_rev#13 as decimal(19,3)) >= (0.9 * cs_item_rev#26)) AND (cast(ss_item_rev#13 as decimal(20,3)) <= (1.1 * cs_item_rev#26))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= (0.9 * ss_item_rev#13))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= (1.1 * ss_item_rev#13)))

(43) Project [codegen id : 6]
Output [3]: [item_id#12, ss_item_rev#13, cs_item_rev#26]
Input [4]: [item_id#12, ss_item_rev#13, item_id#25, cs_item_rev#26]

(44) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(45) CometFilter
Input [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#27)

(46) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#31, i_item_id#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(47) CometFilter
Input [2]: [i_item_sk#31, i_item_id#32]
Condition : (isnotnull(i_item_sk#31) AND isnotnull(i_item_id#32))

(48) CometBroadcastExchange
Input [2]: [i_item_sk#31, i_item_id#32]
Arguments: [i_item_sk#31, i_item_id#32]

(49) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Right output [2]: [i_item_sk#31, i_item_id#32]
Arguments: [ws_item_sk#27], [i_item_sk#31], Inner

(50) CometProject
Input [5]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_sk#31, i_item_id#32]
Arguments: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32], [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32]

(51) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#33, d_date#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(52) CometFilter
Input [2]: [d_date_sk#33, d_date#34]
Condition : isnotnull(d_date_sk#33)

(53) ReusedExchange [Reuses operator id: 97]
Output [1]: [d_date#35]

(54) CometBroadcastHashJoin
Left output [2]: [d_date_sk#33, d_date#34]
Right output [1]: [d_date#35]
Arguments: [d_date#34], [d_date#35], LeftSemi

(55) CometProject
Input [2]: [d_date_sk#33, d_date#34]
Arguments: [d_date_sk#33], [d_date_sk#33]

(56) CometBroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: [d_date_sk#33]

(57) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32]
Right output [1]: [d_date_sk#33]
Arguments: [ws_sold_date_sk#29], [d_date_sk#33], Inner

(58) CometProject
Input [4]: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32, d_date_sk#33]
Arguments: [ws_ext_sales_price#28, i_item_id#32], [ws_ext_sales_price#28, i_item_id#32]

(59) CometHashAggregate
Input [2]: [ws_ext_sales_price#28, i_item_id#32]
Keys [1]: [i_item_id#32]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#28))]

(60) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_id#32, sum#36]

(61) Exchange
Input [2]: [i_item_id#32, sum#36]
Arguments: hashpartitioning(i_item_id#32, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(62) HashAggregate [codegen id : 5]
Input [2]: [i_item_id#32, sum#36]
Keys [1]: [i_item_id#32]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#28))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#28))#37]
Results [2]: [i_item_id#32 AS item_id#38, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#28))#37,17,2) AS ws_item_rev#39]

(63) Filter [codegen id : 5]
Input [2]: [item_id#38, ws_item_rev#39]
Condition : isnotnull(ws_item_rev#39)

(64) BroadcastExchange
Input [2]: [item_id#38, ws_item_rev#39]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(65) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [item_id#12]
Right keys [1]: [item_id#38]
Join type: Inner
Join condition: ((((((((cast(ss_item_rev#13 as decimal(19,3)) >= (0.9 * ws_item_rev#39)) AND (cast(ss_item_rev#13 as decimal(20,3)) <= (1.1 * ws_item_rev#39))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= (0.9 * ws_item_rev#39))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= (1.1 * ws_item_rev#39))) AND (cast(ws_item_rev#39 as decimal(19,3)) >= (0.9 * ss_item_rev#13))) AND (cast(ws_item_rev#39 as decimal(20,3)) <= (1.1 * ss_item_rev#13))) AND (cast(ws_item_rev#39 as decimal(19,3)) >= (0.9 * cs_item_rev#26))) AND (cast(ws_item_rev#39 as decimal(20,3)) <= (1.1 * cs_item_rev#26)))

(66) Project [codegen id : 6]
Output [8]: [item_id#12, ss_item_rev#13, (((ss_item_rev#13 / ((ss_item_rev#13 + cs_item_rev#26) + ws_item_rev#39)) / 3) * 100) AS ss_dev#40, cs_item_rev#26, (((cs_item_rev#26 / ((ss_item_rev#13 + cs_item_rev#26) + ws_item_rev#39)) / 3) * 100) AS cs_dev#41, ws_item_rev#39, (((ws_item_rev#39 / ((ss_item_rev#13 + cs_item_rev#26) + ws_item_rev#39)) / 3) * 100) AS ws_dev#42, (((ss_item_rev#13 + cs_item_rev#26) + ws_item_rev#39) / 3) AS average#43]
Input [5]: [item_id#12, ss_item_rev#13, cs_item_rev#26, item_id#38, ws_item_rev#39]

(67) TakeOrderedAndProject
Input [8]: [item_id#12, ss_item_rev#13, ss_dev#40, cs_item_rev#26, cs_dev#41, ws_item_rev#39, ws_dev#42, average#43]
Arguments: 100, [item_id#12 ASC NULLS FIRST, ss_item_rev#13 ASC NULLS FIRST], [item_id#12, ss_item_rev#13, ss_dev#40, cs_item_rev#26, cs_dev#41, ws_item_rev#39, ws_dev#42, average#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (77)
+- * ColumnarToRow (76)
   +- CometProject (75)
      +- CometBroadcastHashJoin (74)
         :- CometFilter (69)
         :  +- CometScan parquet spark_catalog.default.date_dim (68)
         +- CometBroadcastExchange (73)
            +- CometProject (72)
               +- CometFilter (71)
                  +- CometScan parquet spark_catalog.default.date_dim (70)


(68) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(69) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(70) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date#9, d_week_seq#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(71) CometFilter
Input [2]: [d_date#9, d_week_seq#44]
Condition : (isnotnull(d_week_seq#44) AND (d_week_seq#44 = Subquery scalar-subquery#45, [id=#46]))

(72) CometProject
Input [2]: [d_date#9, d_week_seq#44]
Arguments: [d_date#9], [d_date#9]

(73) CometBroadcastExchange
Input [1]: [d_date#9]
Arguments: [d_date#9]

(74) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#9]
Arguments: [d_date#8], [d_date#9], LeftSemi

(75) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(76) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(77) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 71 Hosting Expression = Subquery scalar-subquery#45, [id=#46]
* ColumnarToRow (81)
+- CometProject (80)
   +- CometFilter (79)
      +- CometScan parquet spark_catalog.default.date_dim (78)


(78) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date#47, d_week_seq#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(79) CometFilter
Input [2]: [d_date#47, d_week_seq#48]
Condition : (isnotnull(d_date#47) AND (d_date#47 = 2000-01-03))

(80) CometProject
Input [2]: [d_date#47, d_week_seq#48]
Arguments: [d_week_seq#48], [d_week_seq#48]

(81) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#48]

Subquery:3 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#17
BroadcastExchange (91)
+- * ColumnarToRow (90)
   +- CometProject (89)
      +- CometBroadcastHashJoin (88)
         :- CometFilter (83)
         :  +- CometScan parquet spark_catalog.default.date_dim (82)
         +- CometBroadcastExchange (87)
            +- CometProject (86)
               +- CometFilter (85)
                  +- CometScan parquet spark_catalog.default.date_dim (84)


(82) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#20, d_date#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(83) CometFilter
Input [2]: [d_date_sk#20, d_date#21]
Condition : isnotnull(d_date_sk#20)

(84) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date#22, d_week_seq#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(85) CometFilter
Input [2]: [d_date#22, d_week_seq#49]
Condition : (isnotnull(d_week_seq#49) AND (d_week_seq#49 = ReusedSubquery Subquery scalar-subquery#45, [id=#46]))

(86) CometProject
Input [2]: [d_date#22, d_week_seq#49]
Arguments: [d_date#22], [d_date#22]

(87) CometBroadcastExchange
Input [1]: [d_date#22]
Arguments: [d_date#22]

(88) CometBroadcastHashJoin
Left output [2]: [d_date_sk#20, d_date#21]
Right output [1]: [d_date#22]
Arguments: [d_date#21], [d_date#22], LeftSemi

(89) CometProject
Input [2]: [d_date_sk#20, d_date#21]
Arguments: [d_date_sk#20], [d_date_sk#20]

(90) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#20]

(91) BroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:4 Hosting operator id = 85 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:5 Hosting operator id = 44 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#30
BroadcastExchange (101)
+- * ColumnarToRow (100)
   +- CometProject (99)
      +- CometBroadcastHashJoin (98)
         :- CometFilter (93)
         :  +- CometScan parquet spark_catalog.default.date_dim (92)
         +- CometBroadcastExchange (97)
            +- CometProject (96)
               +- CometFilter (95)
                  +- CometScan parquet spark_catalog.default.date_dim (94)


(92) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#33, d_date#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(93) CometFilter
Input [2]: [d_date_sk#33, d_date#34]
Condition : isnotnull(d_date_sk#33)

(94) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date#35, d_week_seq#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(95) CometFilter
Input [2]: [d_date#35, d_week_seq#50]
Condition : (isnotnull(d_week_seq#50) AND (d_week_seq#50 = ReusedSubquery Subquery scalar-subquery#45, [id=#46]))

(96) CometProject
Input [2]: [d_date#35, d_week_seq#50]
Arguments: [d_date#35], [d_date#35]

(97) CometBroadcastExchange
Input [1]: [d_date#35]
Arguments: [d_date#35]

(98) CometBroadcastHashJoin
Left output [2]: [d_date_sk#33, d_date#34]
Right output [1]: [d_date#35]
Arguments: [d_date#34], [d_date#35], LeftSemi

(99) CometProject
Input [2]: [d_date_sk#33, d_date#34]
Arguments: [d_date_sk#33], [d_date_sk#33]

(100) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#33]

(101) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:6 Hosting operator id = 95 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]


