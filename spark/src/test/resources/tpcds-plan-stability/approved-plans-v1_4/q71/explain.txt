== Physical Plan ==
* Sort (43)
+- Exchange (42)
   +- * HashAggregate (41)
      +- Exchange (40)
         +- * ColumnarToRow (39)
            +- CometHashAggregate (38)
               +- CometProject (37)
                  +- CometBroadcastHashJoin (36)
                     :- CometProject (31)
                     :  +- CometBroadcastHashJoin (30)
                     :     :- CometBroadcastExchange (4)
                     :     :  +- CometProject (3)
                     :     :     +- CometFilter (2)
                     :     :        +- CometScan parquet spark_catalog.default.item (1)
                     :     +- CometUnion (29)
                     :        :- CometProject (12)
                     :        :  +- CometBroadcastHashJoin (11)
                     :        :     :- CometFilter (6)
                     :        :     :  +- CometScan parquet spark_catalog.default.web_sales (5)
                     :        :     +- CometBroadcastExchange (10)
                     :        :        +- CometProject (9)
                     :        :           +- CometFilter (8)
                     :        :              +- CometScan parquet spark_catalog.default.date_dim (7)
                     :        :- CometProject (20)
                     :        :  +- CometBroadcastHashJoin (19)
                     :        :     :- CometFilter (14)
                     :        :     :  +- CometScan parquet spark_catalog.default.catalog_sales (13)
                     :        :     +- CometBroadcastExchange (18)
                     :        :        +- CometProject (17)
                     :        :           +- CometFilter (16)
                     :        :              +- CometScan parquet spark_catalog.default.date_dim (15)
                     :        +- CometProject (28)
                     :           +- CometBroadcastHashJoin (27)
                     :              :- CometFilter (22)
                     :              :  +- CometScan parquet spark_catalog.default.store_sales (21)
                     :              +- CometBroadcastExchange (26)
                     :                 +- CometProject (25)
                     :                    +- CometFilter (24)
                     :                       +- CometScan parquet spark_catalog.default.date_dim (23)
                     +- CometBroadcastExchange (35)
                        +- CometProject (34)
                           +- CometFilter (33)
                              +- CometScan parquet spark_catalog.default.time_dim (32)


(1) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,1), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(2) CometFilter
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Condition : ((isnotnull(i_manager_id#4) AND (i_manager_id#4 = 1)) AND isnotnull(i_item_sk#1))

(3) CometProject
Input [4]: [i_item_sk#1, i_brand_id#2, i_brand#3, i_manager_id#4]
Arguments: [i_item_sk#1, i_brand_id#2, i_brand#3], [i_item_sk#1, i_brand_id#2, i_brand#3]

(4) CometBroadcastExchange
Input [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Arguments: [i_item_sk#1, i_brand_id#2, i_brand#3]

(5) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#8), dynamicpruningexpression(ws_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_sold_time_sk)]
ReadSchema: struct<ws_sold_time_sk:int,ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(6) CometFilter
Input [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]
Condition : (isnotnull(ws_item_sk#6) AND isnotnull(ws_sold_time_sk#5))

(7) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(8) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_moy#12) AND isnotnull(d_year#11)) AND (d_moy#12 = 11)) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(9) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(10) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(11) CometBroadcastHashJoin
Left output [4]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8]
Right output [1]: [d_date_sk#10]
Arguments: [ws_sold_date_sk#8], [d_date_sk#10], Inner

(12) CometProject
Input [5]: [ws_sold_time_sk#5, ws_item_sk#6, ws_ext_sales_price#7, ws_sold_date_sk#8, d_date_sk#10]
Arguments: [ext_price#13, sold_item_sk#14, time_sk#15], [ws_ext_sales_price#7 AS ext_price#13, ws_item_sk#6 AS sold_item_sk#14, ws_sold_time_sk#5 AS time_sk#15]

(13) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_sold_time_sk)]
ReadSchema: struct<cs_sold_time_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(14) CometFilter
Input [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Condition : (isnotnull(cs_item_sk#17) AND isnotnull(cs_sold_time_sk#16))

(15) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#21, d_year#22, d_moy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(16) CometFilter
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]
Condition : ((((isnotnull(d_moy#23) AND isnotnull(d_year#22)) AND (d_moy#23 = 11)) AND (d_year#22 = 1999)) AND isnotnull(d_date_sk#21))

(17) CometProject
Input [3]: [d_date_sk#21, d_year#22, d_moy#23]
Arguments: [d_date_sk#21], [d_date_sk#21]

(18) CometBroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: [d_date_sk#21]

(19) CometBroadcastHashJoin
Left output [4]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#19], [d_date_sk#21], Inner

(20) CometProject
Input [5]: [cs_sold_time_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19, d_date_sk#21]
Arguments: [ext_price#24, sold_item_sk#25, time_sk#26], [cs_ext_sales_price#18 AS ext_price#24, cs_item_sk#17 AS sold_item_sk#25, cs_sold_time_sk#16 AS time_sk#26]

(21) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_sold_time_sk#27, ss_item_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#30), dynamicpruningexpression(ss_sold_date_sk#30 IN dynamicpruning#31)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_sold_time_sk)]
ReadSchema: struct<ss_sold_time_sk:int,ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(22) CometFilter
Input [4]: [ss_sold_time_sk#27, ss_item_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Condition : (isnotnull(ss_item_sk#28) AND isnotnull(ss_sold_time_sk#27))

(23) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#32, d_year#33, d_moy#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(24) CometFilter
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Condition : ((((isnotnull(d_moy#34) AND isnotnull(d_year#33)) AND (d_moy#34 = 11)) AND (d_year#33 = 1999)) AND isnotnull(d_date_sk#32))

(25) CometProject
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Arguments: [d_date_sk#32], [d_date_sk#32]

(26) CometBroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: [d_date_sk#32]

(27) CometBroadcastHashJoin
Left output [4]: [ss_sold_time_sk#27, ss_item_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30]
Right output [1]: [d_date_sk#32]
Arguments: [ss_sold_date_sk#30], [d_date_sk#32], Inner

(28) CometProject
Input [5]: [ss_sold_time_sk#27, ss_item_sk#28, ss_ext_sales_price#29, ss_sold_date_sk#30, d_date_sk#32]
Arguments: [ext_price#35, sold_item_sk#36, time_sk#37], [ss_ext_sales_price#29 AS ext_price#35, ss_item_sk#28 AS sold_item_sk#36, ss_sold_time_sk#27 AS time_sk#37]

(29) CometUnion
Child 0 Input [3]: [ext_price#13, sold_item_sk#14, time_sk#15]
Child 1 Input [3]: [ext_price#24, sold_item_sk#25, time_sk#26]
Child 2 Input [3]: [ext_price#35, sold_item_sk#36, time_sk#37]

(30) CometBroadcastHashJoin
Left output [3]: [i_item_sk#1, i_brand_id#2, i_brand#3]
Right output [3]: [ext_price#13, sold_item_sk#14, time_sk#15]
Arguments: [i_item_sk#1], [sold_item_sk#14], Inner

(31) CometProject
Input [6]: [i_item_sk#1, i_brand_id#2, i_brand#3, ext_price#13, sold_item_sk#14, time_sk#15]
Arguments: [i_brand_id#2, i_brand#3, ext_price#13, time_sk#15], [i_brand_id#2, i_brand#3, ext_price#13, time_sk#15]

(32) Scan parquet spark_catalog.default.time_dim
Output [4]: [t_time_sk#38, t_hour#39, t_minute#40, t_meal_time#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/time_dim]
PushedFilters: [Or(EqualTo(t_meal_time,breakfast           ),EqualTo(t_meal_time,dinner              )), IsNotNull(t_time_sk)]
ReadSchema: struct<t_time_sk:int,t_hour:int,t_minute:int,t_meal_time:string>

(33) CometFilter
Input [4]: [t_time_sk#38, t_hour#39, t_minute#40, t_meal_time#41]
Condition : (((t_meal_time#41 = breakfast           ) OR (t_meal_time#41 = dinner              )) AND isnotnull(t_time_sk#38))

(34) CometProject
Input [4]: [t_time_sk#38, t_hour#39, t_minute#40, t_meal_time#41]
Arguments: [t_time_sk#38, t_hour#39, t_minute#40], [t_time_sk#38, t_hour#39, t_minute#40]

(35) CometBroadcastExchange
Input [3]: [t_time_sk#38, t_hour#39, t_minute#40]
Arguments: [t_time_sk#38, t_hour#39, t_minute#40]

(36) CometBroadcastHashJoin
Left output [4]: [i_brand_id#2, i_brand#3, ext_price#13, time_sk#15]
Right output [3]: [t_time_sk#38, t_hour#39, t_minute#40]
Arguments: [time_sk#15], [t_time_sk#38], Inner

(37) CometProject
Input [7]: [i_brand_id#2, i_brand#3, ext_price#13, time_sk#15, t_time_sk#38, t_hour#39, t_minute#40]
Arguments: [i_brand_id#2, i_brand#3, ext_price#13, t_hour#39, t_minute#40], [i_brand_id#2, i_brand#3, ext_price#13, t_hour#39, t_minute#40]

(38) CometHashAggregate
Input [5]: [i_brand_id#2, i_brand#3, ext_price#13, t_hour#39, t_minute#40]
Keys [4]: [i_brand#3, i_brand_id#2, t_hour#39, t_minute#40]
Functions [1]: [partial_sum(UnscaledValue(ext_price#13))]

(39) ColumnarToRow [codegen id : 1]
Input [5]: [i_brand#3, i_brand_id#2, t_hour#39, t_minute#40, sum#42]

(40) Exchange
Input [5]: [i_brand#3, i_brand_id#2, t_hour#39, t_minute#40, sum#42]
Arguments: hashpartitioning(i_brand#3, i_brand_id#2, t_hour#39, t_minute#40, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(41) HashAggregate [codegen id : 2]
Input [5]: [i_brand#3, i_brand_id#2, t_hour#39, t_minute#40, sum#42]
Keys [4]: [i_brand#3, i_brand_id#2, t_hour#39, t_minute#40]
Functions [1]: [sum(UnscaledValue(ext_price#13))]
Aggregate Attributes [1]: [sum(UnscaledValue(ext_price#13))#43]
Results [5]: [i_brand_id#2 AS brand_id#44, i_brand#3 AS brand#45, t_hour#39, t_minute#40, MakeDecimal(sum(UnscaledValue(ext_price#13))#43,17,2) AS ext_price#46]

(42) Exchange
Input [5]: [brand_id#44, brand#45, t_hour#39, t_minute#40, ext_price#46]
Arguments: rangepartitioning(ext_price#46 DESC NULLS LAST, brand_id#44 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(43) Sort [codegen id : 3]
Input [5]: [brand_id#44, brand#45, t_hour#39, t_minute#40, ext_price#46]
Arguments: [ext_price#46 DESC NULLS LAST, brand_id#44 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 5 Hosting Expression = ws_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (48)
+- * ColumnarToRow (47)
   +- CometProject (46)
      +- CometFilter (45)
         +- CometScan parquet spark_catalog.default.date_dim (44)


(44) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(45) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_moy#12) AND isnotnull(d_year#11)) AND (d_moy#12 = 11)) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(46) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(47) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(48) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

Subquery:2 Hosting operator id = 13 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#9

Subquery:3 Hosting operator id = 21 Hosting Expression = ss_sold_date_sk#30 IN dynamicpruning#9


