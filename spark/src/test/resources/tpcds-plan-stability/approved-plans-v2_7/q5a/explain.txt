== Physical Plan ==
TakeOrderedAndProject (143)
+- * HashAggregate (142)
   +- Exchange (141)
      +- * HashAggregate (140)
         +- Union (139)
            :- * HashAggregate (74)
            :  +- Exchange (73)
            :     +- * HashAggregate (72)
            :        +- Union (71)
            :           :- * HashAggregate (22)
            :           :  +- Exchange (21)
            :           :     +- * ColumnarToRow (20)
            :           :        +- CometHashAggregate (19)
            :           :           +- CometProject (18)
            :           :              +- CometBroadcastHashJoin (17)
            :           :                 :- CometProject (13)
            :           :                 :  +- CometBroadcastHashJoin (12)
            :           :                 :     :- CometUnion (7)
            :           :                 :     :  :- CometProject (3)
            :           :                 :     :  :  +- CometFilter (2)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- CometProject (6)
            :           :                 :     :     +- CometFilter (5)
            :           :                 :     :        +- CometScan parquet spark_catalog.default.store_returns (4)
            :           :                 :     +- CometBroadcastExchange (11)
            :           :                 :        +- CometProject (10)
            :           :                 :           +- CometFilter (9)
            :           :                 :              +- CometScan parquet spark_catalog.default.date_dim (8)
            :           :                 +- CometBroadcastExchange (16)
            :           :                    +- CometFilter (15)
            :           :                       +- CometScan parquet spark_catalog.default.store (14)
            :           :- * HashAggregate (44)
            :           :  +- Exchange (43)
            :           :     +- * ColumnarToRow (42)
            :           :        +- CometHashAggregate (41)
            :           :           +- CometProject (40)
            :           :              +- CometBroadcastHashJoin (39)
            :           :                 :- CometProject (35)
            :           :                 :  +- CometBroadcastHashJoin (34)
            :           :                 :     :- CometUnion (29)
            :           :                 :     :  :- CometProject (25)
            :           :                 :     :  :  +- CometFilter (24)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (23)
            :           :                 :     :  +- CometProject (28)
            :           :                 :     :     +- CometFilter (27)
            :           :                 :     :        +- CometScan parquet spark_catalog.default.catalog_returns (26)
            :           :                 :     +- CometBroadcastExchange (33)
            :           :                 :        +- CometProject (32)
            :           :                 :           +- CometFilter (31)
            :           :                 :              +- CometScan parquet spark_catalog.default.date_dim (30)
            :           :                 +- CometBroadcastExchange (38)
            :           :                    +- CometFilter (37)
            :           :                       +- CometScan parquet spark_catalog.default.catalog_page (36)
            :           +- * HashAggregate (70)
            :              +- Exchange (69)
            :                 +- * ColumnarToRow (68)
            :                    +- CometHashAggregate (67)
            :                       +- CometProject (66)
            :                          +- CometBroadcastHashJoin (65)
            :                             :- CometProject (61)
            :                             :  +- CometBroadcastHashJoin (60)
            :                             :     :- CometUnion (55)
            :                             :     :  :- CometProject (47)
            :                             :     :  :  +- CometFilter (46)
            :                             :     :  :     +- CometScan parquet spark_catalog.default.web_sales (45)
            :                             :     :  +- CometProject (54)
            :                             :     :     +- CometBroadcastHashJoin (53)
            :                             :     :        :- CometBroadcastExchange (49)
            :                             :     :        :  +- CometScan parquet spark_catalog.default.web_returns (48)
            :                             :     :        +- CometProject (52)
            :                             :     :           +- CometFilter (51)
            :                             :     :              +- CometScan parquet spark_catalog.default.web_sales (50)
            :                             :     +- CometBroadcastExchange (59)
            :                             :        +- CometProject (58)
            :                             :           +- CometFilter (57)
            :                             :              +- CometScan parquet spark_catalog.default.date_dim (56)
            :                             +- CometBroadcastExchange (64)
            :                                +- CometFilter (63)
            :                                   +- CometScan parquet spark_catalog.default.web_site (62)
            :- * HashAggregate (106)
            :  +- Exchange (105)
            :     +- * HashAggregate (104)
            :        +- * HashAggregate (103)
            :           +- Exchange (102)
            :              +- * HashAggregate (101)
            :                 +- Union (100)
            :                    :- * HashAggregate (76)
            :                    :  +- ReusedExchange (75)
            :                    :- * HashAggregate (78)
            :                    :  +- ReusedExchange (77)
            :                    +- * HashAggregate (99)
            :                       +- Exchange (98)
            :                          +- * ColumnarToRow (97)
            :                             +- CometHashAggregate (96)
            :                                +- CometProject (95)
            :                                   +- CometBroadcastHashJoin (94)
            :                                      :- CometProject (92)
            :                                      :  +- CometBroadcastHashJoin (91)
            :                                      :     :- CometUnion (89)
            :                                      :     :  :- CometProject (81)
            :                                      :     :  :  +- CometFilter (80)
            :                                      :     :  :     +- CometScan parquet spark_catalog.default.web_sales (79)
            :                                      :     :  +- CometProject (88)
            :                                      :     :     +- CometBroadcastHashJoin (87)
            :                                      :     :        :- CometBroadcastExchange (83)
            :                                      :     :        :  +- CometScan parquet spark_catalog.default.web_returns (82)
            :                                      :     :        +- CometProject (86)
            :                                      :     :           +- CometFilter (85)
            :                                      :     :              +- CometScan parquet spark_catalog.default.web_sales (84)
            :                                      :     +- ReusedExchange (90)
            :                                      +- ReusedExchange (93)
            +- * HashAggregate (138)
               +- Exchange (137)
                  +- * HashAggregate (136)
                     +- * HashAggregate (135)
                        +- Exchange (134)
                           +- * HashAggregate (133)
                              +- Union (132)
                                 :- * HashAggregate (108)
                                 :  +- ReusedExchange (107)
                                 :- * HashAggregate (110)
                                 :  +- ReusedExchange (109)
                                 +- * HashAggregate (131)
                                    +- Exchange (130)
                                       +- * ColumnarToRow (129)
                                          +- CometHashAggregate (128)
                                             +- CometProject (127)
                                                +- CometBroadcastHashJoin (126)
                                                   :- CometProject (124)
                                                   :  +- CometBroadcastHashJoin (123)
                                                   :     :- CometUnion (121)
                                                   :     :  :- CometProject (113)
                                                   :     :  :  +- CometFilter (112)
                                                   :     :  :     +- CometScan parquet spark_catalog.default.web_sales (111)
                                                   :     :  +- CometProject (120)
                                                   :     :     +- CometBroadcastHashJoin (119)
                                                   :     :        :- CometBroadcastExchange (115)
                                                   :     :        :  +- CometScan parquet spark_catalog.default.web_returns (114)
                                                   :     :        +- CometProject (118)
                                                   :     :           +- CometFilter (117)
                                                   :     :              +- CometScan parquet spark_catalog.default.web_sales (116)
                                                   :     +- ReusedExchange (122)
                                                   +- ReusedExchange (125)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Arguments: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11], [ss_store_sk#1 AS store_sk#6, ss_sold_date_sk#4 AS date_sk#7, ss_ext_sales_price#2 AS sales_price#8, ss_net_profit#3 AS profit#9, 0.00 AS return_amt#10, 0.00 AS net_loss#11]

(4) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#15), dynamicpruningexpression(sr_returned_date_sk#15 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(5) CometFilter
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#12)

(6) CometProject
Input [4]: [sr_store_sk#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Arguments: [store_sk#16, date_sk#17, sales_price#18, profit#19, return_amt#20, net_loss#21], [sr_store_sk#12 AS store_sk#16, sr_returned_date_sk#15 AS date_sk#17, 0.00 AS sales_price#18, 0.00 AS profit#19, sr_return_amt#13 AS return_amt#20, sr_net_loss#14 AS net_loss#21]

(7) CometUnion
Child 0 Input [6]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11]
Child 1 Input [6]: [store_sk#16, date_sk#17, sales_price#18, profit#19, return_amt#20, net_loss#21]

(8) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_date#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(9) CometFilter
Input [2]: [d_date_sk#22, d_date#23]
Condition : (((isnotnull(d_date#23) AND (d_date#23 >= 1998-08-04)) AND (d_date#23 <= 1998-08-18)) AND isnotnull(d_date_sk#22))

(10) CometProject
Input [2]: [d_date_sk#22, d_date#23]
Arguments: [d_date_sk#22], [d_date_sk#22]

(11) CometBroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: [d_date_sk#22]

(12) CometBroadcastHashJoin
Left output [6]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11]
Right output [1]: [d_date_sk#22]
Arguments: [date_sk#7], [d_date_sk#22], Inner

(13) CometProject
Input [7]: [store_sk#6, date_sk#7, sales_price#8, profit#9, return_amt#10, net_loss#11, d_date_sk#22]
Arguments: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11], [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11]

(14) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#24, s_store_id#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(15) CometFilter
Input [2]: [s_store_sk#24, s_store_id#25]
Condition : isnotnull(s_store_sk#24)

(16) CometBroadcastExchange
Input [2]: [s_store_sk#24, s_store_id#25]
Arguments: [s_store_sk#24, s_store_id#25]

(17) CometBroadcastHashJoin
Left output [5]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11]
Right output [2]: [s_store_sk#24, s_store_id#25]
Arguments: [store_sk#6], [s_store_sk#24], Inner

(18) CometProject
Input [7]: [store_sk#6, sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_sk#24, s_store_id#25]
Arguments: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#25], [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#25]

(19) CometHashAggregate
Input [5]: [sales_price#8, profit#9, return_amt#10, net_loss#11, s_store_id#25]
Keys [1]: [s_store_id#25]
Functions [4]: [partial_sum(UnscaledValue(sales_price#8)), partial_sum(UnscaledValue(return_amt#10)), partial_sum(UnscaledValue(profit#9)), partial_sum(UnscaledValue(net_loss#11))]

(20) ColumnarToRow [codegen id : 1]
Input [5]: [s_store_id#25, sum#26, sum#27, sum#28, sum#29]

(21) Exchange
Input [5]: [s_store_id#25, sum#26, sum#27, sum#28, sum#29]
Arguments: hashpartitioning(s_store_id#25, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(22) HashAggregate [codegen id : 2]
Input [5]: [s_store_id#25, sum#26, sum#27, sum#28, sum#29]
Keys [1]: [s_store_id#25]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#30, sum(UnscaledValue(return_amt#10))#31, sum(UnscaledValue(profit#9))#32, sum(UnscaledValue(net_loss#11))#33]
Results [5]: [store channel AS channel#34, concat(store, s_store_id#25) AS id#35, MakeDecimal(sum(UnscaledValue(sales_price#8))#30,17,2) AS sales#36, MakeDecimal(sum(UnscaledValue(return_amt#10))#31,17,2) AS returns#37, (MakeDecimal(sum(UnscaledValue(profit#9))#32,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#33,17,2)) AS profit#38]

(23) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_catalog_page_sk#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#42), dynamicpruningexpression(cs_sold_date_sk#42 IN dynamicpruning#43)]
PushedFilters: [IsNotNull(cs_catalog_page_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(24) CometFilter
Input [4]: [cs_catalog_page_sk#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Condition : isnotnull(cs_catalog_page_sk#39)

(25) CometProject
Input [4]: [cs_catalog_page_sk#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Arguments: [page_sk#44, date_sk#45, sales_price#46, profit#47, return_amt#48, net_loss#49], [cs_catalog_page_sk#39 AS page_sk#44, cs_sold_date_sk#42 AS date_sk#45, cs_ext_sales_price#40 AS sales_price#46, cs_net_profit#41 AS profit#47, 0.00 AS return_amt#48, 0.00 AS net_loss#49]

(26) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_catalog_page_sk#50, cr_return_amount#51, cr_net_loss#52, cr_returned_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#53), dynamicpruningexpression(cr_returned_date_sk#53 IN dynamicpruning#43)]
PushedFilters: [IsNotNull(cr_catalog_page_sk)]
ReadSchema: struct<cr_catalog_page_sk:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(27) CometFilter
Input [4]: [cr_catalog_page_sk#50, cr_return_amount#51, cr_net_loss#52, cr_returned_date_sk#53]
Condition : isnotnull(cr_catalog_page_sk#50)

(28) CometProject
Input [4]: [cr_catalog_page_sk#50, cr_return_amount#51, cr_net_loss#52, cr_returned_date_sk#53]
Arguments: [page_sk#54, date_sk#55, sales_price#56, profit#57, return_amt#58, net_loss#59], [cr_catalog_page_sk#50 AS page_sk#54, cr_returned_date_sk#53 AS date_sk#55, 0.00 AS sales_price#56, 0.00 AS profit#57, cr_return_amount#51 AS return_amt#58, cr_net_loss#52 AS net_loss#59]

(29) CometUnion
Child 0 Input [6]: [page_sk#44, date_sk#45, sales_price#46, profit#47, return_amt#48, net_loss#49]
Child 1 Input [6]: [page_sk#54, date_sk#55, sales_price#56, profit#57, return_amt#58, net_loss#59]

(30) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#60, d_date#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(31) CometFilter
Input [2]: [d_date_sk#60, d_date#61]
Condition : (((isnotnull(d_date#61) AND (d_date#61 >= 1998-08-04)) AND (d_date#61 <= 1998-08-18)) AND isnotnull(d_date_sk#60))

(32) CometProject
Input [2]: [d_date_sk#60, d_date#61]
Arguments: [d_date_sk#60], [d_date_sk#60]

(33) CometBroadcastExchange
Input [1]: [d_date_sk#60]
Arguments: [d_date_sk#60]

(34) CometBroadcastHashJoin
Left output [6]: [page_sk#44, date_sk#45, sales_price#46, profit#47, return_amt#48, net_loss#49]
Right output [1]: [d_date_sk#60]
Arguments: [date_sk#45], [d_date_sk#60], Inner

(35) CometProject
Input [7]: [page_sk#44, date_sk#45, sales_price#46, profit#47, return_amt#48, net_loss#49, d_date_sk#60]
Arguments: [page_sk#44, sales_price#46, profit#47, return_amt#48, net_loss#49], [page_sk#44, sales_price#46, profit#47, return_amt#48, net_loss#49]

(36) Scan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(37) CometFilter
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Condition : isnotnull(cp_catalog_page_sk#62)

(38) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Arguments: [cp_catalog_page_sk#62, cp_catalog_page_id#63]

(39) CometBroadcastHashJoin
Left output [5]: [page_sk#44, sales_price#46, profit#47, return_amt#48, net_loss#49]
Right output [2]: [cp_catalog_page_sk#62, cp_catalog_page_id#63]
Arguments: [page_sk#44], [cp_catalog_page_sk#62], Inner

(40) CometProject
Input [7]: [page_sk#44, sales_price#46, profit#47, return_amt#48, net_loss#49, cp_catalog_page_sk#62, cp_catalog_page_id#63]
Arguments: [sales_price#46, profit#47, return_amt#48, net_loss#49, cp_catalog_page_id#63], [sales_price#46, profit#47, return_amt#48, net_loss#49, cp_catalog_page_id#63]

(41) CometHashAggregate
Input [5]: [sales_price#46, profit#47, return_amt#48, net_loss#49, cp_catalog_page_id#63]
Keys [1]: [cp_catalog_page_id#63]
Functions [4]: [partial_sum(UnscaledValue(sales_price#46)), partial_sum(UnscaledValue(return_amt#48)), partial_sum(UnscaledValue(profit#47)), partial_sum(UnscaledValue(net_loss#49))]

(42) ColumnarToRow [codegen id : 3]
Input [5]: [cp_catalog_page_id#63, sum#64, sum#65, sum#66, sum#67]

(43) Exchange
Input [5]: [cp_catalog_page_id#63, sum#64, sum#65, sum#66, sum#67]
Arguments: hashpartitioning(cp_catalog_page_id#63, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(44) HashAggregate [codegen id : 4]
Input [5]: [cp_catalog_page_id#63, sum#64, sum#65, sum#66, sum#67]
Keys [1]: [cp_catalog_page_id#63]
Functions [4]: [sum(UnscaledValue(sales_price#46)), sum(UnscaledValue(return_amt#48)), sum(UnscaledValue(profit#47)), sum(UnscaledValue(net_loss#49))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#46))#68, sum(UnscaledValue(return_amt#48))#69, sum(UnscaledValue(profit#47))#70, sum(UnscaledValue(net_loss#49))#71]
Results [5]: [catalog channel AS channel#72, concat(catalog_page, cp_catalog_page_id#63) AS id#73, MakeDecimal(sum(UnscaledValue(sales_price#46))#68,17,2) AS sales#74, MakeDecimal(sum(UnscaledValue(return_amt#48))#69,17,2) AS returns#75, (MakeDecimal(sum(UnscaledValue(profit#47))#70,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#49))#71,17,2)) AS profit#76]

(45) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#81)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(46) CometFilter
Input [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Condition : isnotnull(ws_web_site_sk#77)

(47) CometProject
Input [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Arguments: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87], [ws_web_site_sk#77 AS wsr_web_site_sk#82, ws_sold_date_sk#80 AS date_sk#83, ws_ext_sales_price#78 AS sales_price#84, ws_net_profit#79 AS profit#85, 0.00 AS return_amt#86, 0.00 AS net_loss#87]

(48) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#92), dynamicpruningexpression(wr_returned_date_sk#92 IN dynamicpruning#81)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(49) CometBroadcastExchange
Input [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Arguments: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]

(50) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(51) CometFilter
Input [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Condition : ((isnotnull(ws_item_sk#93) AND isnotnull(ws_order_number#95)) AND isnotnull(ws_web_site_sk#94))

(52) CometProject
Input [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Arguments: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95], [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]

(53) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Right output [3]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]
Arguments: [wr_item_sk#88, wr_order_number#89], [ws_item_sk#93, ws_order_number#95], Inner

(54) CometProject
Input [8]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92, ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]
Arguments: [wsr_web_site_sk#97, date_sk#98, sales_price#99, profit#100, return_amt#101, net_loss#102], [ws_web_site_sk#94 AS wsr_web_site_sk#97, wr_returned_date_sk#92 AS date_sk#98, 0.00 AS sales_price#99, 0.00 AS profit#100, wr_return_amt#90 AS return_amt#101, wr_net_loss#91 AS net_loss#102]

(55) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87]
Child 1 Input [6]: [wsr_web_site_sk#97, date_sk#98, sales_price#99, profit#100, return_amt#101, net_loss#102]

(56) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#103, d_date#104]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(57) CometFilter
Input [2]: [d_date_sk#103, d_date#104]
Condition : (((isnotnull(d_date#104) AND (d_date#104 >= 1998-08-04)) AND (d_date#104 <= 1998-08-18)) AND isnotnull(d_date_sk#103))

(58) CometProject
Input [2]: [d_date_sk#103, d_date#104]
Arguments: [d_date_sk#103], [d_date_sk#103]

(59) CometBroadcastExchange
Input [1]: [d_date_sk#103]
Arguments: [d_date_sk#103]

(60) CometBroadcastHashJoin
Left output [6]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87]
Right output [1]: [d_date_sk#103]
Arguments: [date_sk#83], [d_date_sk#103], Inner

(61) CometProject
Input [7]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87, d_date_sk#103]
Arguments: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87], [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87]

(62) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#105, web_site_id#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(63) CometFilter
Input [2]: [web_site_sk#105, web_site_id#106]
Condition : isnotnull(web_site_sk#105)

(64) CometBroadcastExchange
Input [2]: [web_site_sk#105, web_site_id#106]
Arguments: [web_site_sk#105, web_site_id#106]

(65) CometBroadcastHashJoin
Left output [5]: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87]
Right output [2]: [web_site_sk#105, web_site_id#106]
Arguments: [wsr_web_site_sk#82], [web_site_sk#105], Inner

(66) CometProject
Input [7]: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_sk#105, web_site_id#106]
Arguments: [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106], [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106]

(67) CometHashAggregate
Input [5]: [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106]
Keys [1]: [web_site_id#106]
Functions [4]: [partial_sum(UnscaledValue(sales_price#84)), partial_sum(UnscaledValue(return_amt#86)), partial_sum(UnscaledValue(profit#85)), partial_sum(UnscaledValue(net_loss#87))]

(68) ColumnarToRow [codegen id : 5]
Input [5]: [web_site_id#106, sum#107, sum#108, sum#109, sum#110]

(69) Exchange
Input [5]: [web_site_id#106, sum#107, sum#108, sum#109, sum#110]
Arguments: hashpartitioning(web_site_id#106, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(70) HashAggregate [codegen id : 6]
Input [5]: [web_site_id#106, sum#107, sum#108, sum#109, sum#110]
Keys [1]: [web_site_id#106]
Functions [4]: [sum(UnscaledValue(sales_price#84)), sum(UnscaledValue(return_amt#86)), sum(UnscaledValue(profit#85)), sum(UnscaledValue(net_loss#87))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#84))#111, sum(UnscaledValue(return_amt#86))#112, sum(UnscaledValue(profit#85))#113, sum(UnscaledValue(net_loss#87))#114]
Results [5]: [web channel AS channel#115, concat(web_site, web_site_id#106) AS id#116, MakeDecimal(sum(UnscaledValue(sales_price#84))#111,17,2) AS sales#117, MakeDecimal(sum(UnscaledValue(return_amt#86))#112,17,2) AS returns#118, (MakeDecimal(sum(UnscaledValue(profit#85))#113,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#87))#114,17,2)) AS profit#119]

(71) Union

(72) HashAggregate [codegen id : 7]
Input [5]: [channel#34, id#35, sales#36, returns#37, profit#38]
Keys [2]: [channel#34, id#35]
Functions [3]: [partial_sum(sales#36), partial_sum(returns#37), partial_sum(profit#38)]
Aggregate Attributes [6]: [sum#120, isEmpty#121, sum#122, isEmpty#123, sum#124, isEmpty#125]
Results [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]

(73) Exchange
Input [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Arguments: hashpartitioning(channel#34, id#35, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(74) HashAggregate [codegen id : 8]
Input [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Keys [2]: [channel#34, id#35]
Functions [3]: [sum(sales#36), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#36)#132, sum(returns#37)#133, sum(profit#38)#134]
Results [5]: [channel#34, id#35, cast(sum(sales#36)#132 as decimal(37,2)) AS sales#135, cast(sum(returns#37)#133 as decimal(37,2)) AS returns#136, cast(sum(profit#38)#134 as decimal(38,2)) AS profit#137]

(75) ReusedExchange [Reuses operator id: 21]
Output [5]: [s_store_id#25, sum#138, sum#139, sum#140, sum#141]

(76) HashAggregate [codegen id : 10]
Input [5]: [s_store_id#25, sum#138, sum#139, sum#140, sum#141]
Keys [1]: [s_store_id#25]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#30, sum(UnscaledValue(return_amt#10))#31, sum(UnscaledValue(profit#9))#32, sum(UnscaledValue(net_loss#11))#33]
Results [5]: [store channel AS channel#34, concat(store, s_store_id#25) AS id#35, MakeDecimal(sum(UnscaledValue(sales_price#8))#30,17,2) AS sales#36, MakeDecimal(sum(UnscaledValue(return_amt#10))#31,17,2) AS returns#37, (MakeDecimal(sum(UnscaledValue(profit#9))#32,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#33,17,2)) AS profit#38]

(77) ReusedExchange [Reuses operator id: 43]
Output [5]: [cp_catalog_page_id#63, sum#142, sum#143, sum#144, sum#145]

(78) HashAggregate [codegen id : 12]
Input [5]: [cp_catalog_page_id#63, sum#142, sum#143, sum#144, sum#145]
Keys [1]: [cp_catalog_page_id#63]
Functions [4]: [sum(UnscaledValue(sales_price#46)), sum(UnscaledValue(return_amt#48)), sum(UnscaledValue(profit#47)), sum(UnscaledValue(net_loss#49))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#46))#68, sum(UnscaledValue(return_amt#48))#69, sum(UnscaledValue(profit#47))#70, sum(UnscaledValue(net_loss#49))#71]
Results [5]: [catalog channel AS channel#72, concat(catalog_page, cp_catalog_page_id#63) AS id#73, MakeDecimal(sum(UnscaledValue(sales_price#46))#68,17,2) AS sales#74, MakeDecimal(sum(UnscaledValue(return_amt#48))#69,17,2) AS returns#75, (MakeDecimal(sum(UnscaledValue(profit#47))#70,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#49))#71,17,2)) AS profit#76]

(79) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#146)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(80) CometFilter
Input [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Condition : isnotnull(ws_web_site_sk#77)

(81) CometProject
Input [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Arguments: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87], [ws_web_site_sk#77 AS wsr_web_site_sk#82, ws_sold_date_sk#80 AS date_sk#83, ws_ext_sales_price#78 AS sales_price#84, ws_net_profit#79 AS profit#85, 0.00 AS return_amt#86, 0.00 AS net_loss#87]

(82) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#92), dynamicpruningexpression(wr_returned_date_sk#92 IN dynamicpruning#146)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(83) CometBroadcastExchange
Input [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Arguments: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]

(84) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(85) CometFilter
Input [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Condition : ((isnotnull(ws_item_sk#93) AND isnotnull(ws_order_number#95)) AND isnotnull(ws_web_site_sk#94))

(86) CometProject
Input [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Arguments: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95], [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]

(87) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Right output [3]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]
Arguments: [wr_item_sk#88, wr_order_number#89], [ws_item_sk#93, ws_order_number#95], Inner

(88) CometProject
Input [8]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92, ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]
Arguments: [wsr_web_site_sk#97, date_sk#98, sales_price#99, profit#100, return_amt#101, net_loss#102], [ws_web_site_sk#94 AS wsr_web_site_sk#97, wr_returned_date_sk#92 AS date_sk#98, 0.00 AS sales_price#99, 0.00 AS profit#100, wr_return_amt#90 AS return_amt#101, wr_net_loss#91 AS net_loss#102]

(89) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87]
Child 1 Input [6]: [wsr_web_site_sk#97, date_sk#98, sales_price#99, profit#100, return_amt#101, net_loss#102]

(90) ReusedExchange [Reuses operator id: 59]
Output [1]: [d_date_sk#103]

(91) CometBroadcastHashJoin
Left output [6]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87]
Right output [1]: [d_date_sk#103]
Arguments: [date_sk#83], [d_date_sk#103], Inner

(92) CometProject
Input [7]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87, d_date_sk#103]
Arguments: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87], [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87]

(93) ReusedExchange [Reuses operator id: 64]
Output [2]: [web_site_sk#105, web_site_id#106]

(94) CometBroadcastHashJoin
Left output [5]: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87]
Right output [2]: [web_site_sk#105, web_site_id#106]
Arguments: [wsr_web_site_sk#82], [web_site_sk#105], Inner

(95) CometProject
Input [7]: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_sk#105, web_site_id#106]
Arguments: [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106], [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106]

(96) CometHashAggregate
Input [5]: [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106]
Keys [1]: [web_site_id#106]
Functions [4]: [partial_sum(UnscaledValue(sales_price#84)), partial_sum(UnscaledValue(return_amt#86)), partial_sum(UnscaledValue(profit#85)), partial_sum(UnscaledValue(net_loss#87))]

(97) ColumnarToRow [codegen id : 13]
Input [5]: [web_site_id#106, sum#147, sum#148, sum#149, sum#150]

(98) Exchange
Input [5]: [web_site_id#106, sum#147, sum#148, sum#149, sum#150]
Arguments: hashpartitioning(web_site_id#106, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(99) HashAggregate [codegen id : 14]
Input [5]: [web_site_id#106, sum#147, sum#148, sum#149, sum#150]
Keys [1]: [web_site_id#106]
Functions [4]: [sum(UnscaledValue(sales_price#84)), sum(UnscaledValue(return_amt#86)), sum(UnscaledValue(profit#85)), sum(UnscaledValue(net_loss#87))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#84))#111, sum(UnscaledValue(return_amt#86))#112, sum(UnscaledValue(profit#85))#113, sum(UnscaledValue(net_loss#87))#114]
Results [5]: [web channel AS channel#115, concat(web_site, web_site_id#106) AS id#116, MakeDecimal(sum(UnscaledValue(sales_price#84))#111,17,2) AS sales#117, MakeDecimal(sum(UnscaledValue(return_amt#86))#112,17,2) AS returns#118, (MakeDecimal(sum(UnscaledValue(profit#85))#113,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#87))#114,17,2)) AS profit#119]

(100) Union

(101) HashAggregate [codegen id : 15]
Input [5]: [channel#34, id#35, sales#36, returns#37, profit#38]
Keys [2]: [channel#34, id#35]
Functions [3]: [partial_sum(sales#36), partial_sum(returns#37), partial_sum(profit#38)]
Aggregate Attributes [6]: [sum#120, isEmpty#121, sum#122, isEmpty#123, sum#124, isEmpty#125]
Results [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]

(102) Exchange
Input [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Arguments: hashpartitioning(channel#34, id#35, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(103) HashAggregate [codegen id : 16]
Input [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Keys [2]: [channel#34, id#35]
Functions [3]: [sum(sales#36), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#36)#132, sum(returns#37)#133, sum(profit#38)#134]
Results [4]: [channel#34, sum(sales#36)#132 AS sales#151, sum(returns#37)#133 AS returns#152, sum(profit#38)#134 AS profit#153]

(104) HashAggregate [codegen id : 16]
Input [4]: [channel#34, sales#151, returns#152, profit#153]
Keys [1]: [channel#34]
Functions [3]: [partial_sum(sales#151), partial_sum(returns#152), partial_sum(profit#153)]
Aggregate Attributes [6]: [sum#154, isEmpty#155, sum#156, isEmpty#157, sum#158, isEmpty#159]
Results [7]: [channel#34, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]

(105) Exchange
Input [7]: [channel#34, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Arguments: hashpartitioning(channel#34, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(106) HashAggregate [codegen id : 17]
Input [7]: [channel#34, sum#160, isEmpty#161, sum#162, isEmpty#163, sum#164, isEmpty#165]
Keys [1]: [channel#34]
Functions [3]: [sum(sales#151), sum(returns#152), sum(profit#153)]
Aggregate Attributes [3]: [sum(sales#151)#166, sum(returns#152)#167, sum(profit#153)#168]
Results [5]: [channel#34, null AS id#169, sum(sales#151)#166 AS sum(sales)#170, sum(returns#152)#167 AS sum(returns)#171, sum(profit#153)#168 AS sum(profit)#172]

(107) ReusedExchange [Reuses operator id: 21]
Output [5]: [s_store_id#25, sum#173, sum#174, sum#175, sum#176]

(108) HashAggregate [codegen id : 19]
Input [5]: [s_store_id#25, sum#173, sum#174, sum#175, sum#176]
Keys [1]: [s_store_id#25]
Functions [4]: [sum(UnscaledValue(sales_price#8)), sum(UnscaledValue(return_amt#10)), sum(UnscaledValue(profit#9)), sum(UnscaledValue(net_loss#11))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#8))#30, sum(UnscaledValue(return_amt#10))#31, sum(UnscaledValue(profit#9))#32, sum(UnscaledValue(net_loss#11))#33]
Results [5]: [store channel AS channel#34, concat(store, s_store_id#25) AS id#35, MakeDecimal(sum(UnscaledValue(sales_price#8))#30,17,2) AS sales#36, MakeDecimal(sum(UnscaledValue(return_amt#10))#31,17,2) AS returns#37, (MakeDecimal(sum(UnscaledValue(profit#9))#32,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#11))#33,17,2)) AS profit#38]

(109) ReusedExchange [Reuses operator id: 43]
Output [5]: [cp_catalog_page_id#63, sum#177, sum#178, sum#179, sum#180]

(110) HashAggregate [codegen id : 21]
Input [5]: [cp_catalog_page_id#63, sum#177, sum#178, sum#179, sum#180]
Keys [1]: [cp_catalog_page_id#63]
Functions [4]: [sum(UnscaledValue(sales_price#46)), sum(UnscaledValue(return_amt#48)), sum(UnscaledValue(profit#47)), sum(UnscaledValue(net_loss#49))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#46))#68, sum(UnscaledValue(return_amt#48))#69, sum(UnscaledValue(profit#47))#70, sum(UnscaledValue(net_loss#49))#71]
Results [5]: [catalog channel AS channel#72, concat(catalog_page, cp_catalog_page_id#63) AS id#73, MakeDecimal(sum(UnscaledValue(sales_price#46))#68,17,2) AS sales#74, MakeDecimal(sum(UnscaledValue(return_amt#48))#69,17,2) AS returns#75, (MakeDecimal(sum(UnscaledValue(profit#47))#70,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#49))#71,17,2)) AS profit#76]

(111) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#181)]
PushedFilters: [IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_web_site_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(112) CometFilter
Input [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Condition : isnotnull(ws_web_site_sk#77)

(113) CometProject
Input [4]: [ws_web_site_sk#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Arguments: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87], [ws_web_site_sk#77 AS wsr_web_site_sk#82, ws_sold_date_sk#80 AS date_sk#83, ws_ext_sales_price#78 AS sales_price#84, ws_net_profit#79 AS profit#85, 0.00 AS return_amt#86, 0.00 AS net_loss#87]

(114) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#92), dynamicpruningexpression(wr_returned_date_sk#92 IN dynamicpruning#181)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(115) CometBroadcastExchange
Input [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Arguments: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]

(116) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_order_number:int>

(117) CometFilter
Input [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Condition : ((isnotnull(ws_item_sk#93) AND isnotnull(ws_order_number#95)) AND isnotnull(ws_web_site_sk#94))

(118) CometProject
Input [4]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95, ws_sold_date_sk#96]
Arguments: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95], [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]

(119) CometBroadcastHashJoin
Left output [5]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92]
Right output [3]: [ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]
Arguments: [wr_item_sk#88, wr_order_number#89], [ws_item_sk#93, ws_order_number#95], Inner

(120) CometProject
Input [8]: [wr_item_sk#88, wr_order_number#89, wr_return_amt#90, wr_net_loss#91, wr_returned_date_sk#92, ws_item_sk#93, ws_web_site_sk#94, ws_order_number#95]
Arguments: [wsr_web_site_sk#97, date_sk#98, sales_price#99, profit#100, return_amt#101, net_loss#102], [ws_web_site_sk#94 AS wsr_web_site_sk#97, wr_returned_date_sk#92 AS date_sk#98, 0.00 AS sales_price#99, 0.00 AS profit#100, wr_return_amt#90 AS return_amt#101, wr_net_loss#91 AS net_loss#102]

(121) CometUnion
Child 0 Input [6]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87]
Child 1 Input [6]: [wsr_web_site_sk#97, date_sk#98, sales_price#99, profit#100, return_amt#101, net_loss#102]

(122) ReusedExchange [Reuses operator id: 59]
Output [1]: [d_date_sk#103]

(123) CometBroadcastHashJoin
Left output [6]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87]
Right output [1]: [d_date_sk#103]
Arguments: [date_sk#83], [d_date_sk#103], Inner

(124) CometProject
Input [7]: [wsr_web_site_sk#82, date_sk#83, sales_price#84, profit#85, return_amt#86, net_loss#87, d_date_sk#103]
Arguments: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87], [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87]

(125) ReusedExchange [Reuses operator id: 64]
Output [2]: [web_site_sk#105, web_site_id#106]

(126) CometBroadcastHashJoin
Left output [5]: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87]
Right output [2]: [web_site_sk#105, web_site_id#106]
Arguments: [wsr_web_site_sk#82], [web_site_sk#105], Inner

(127) CometProject
Input [7]: [wsr_web_site_sk#82, sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_sk#105, web_site_id#106]
Arguments: [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106], [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106]

(128) CometHashAggregate
Input [5]: [sales_price#84, profit#85, return_amt#86, net_loss#87, web_site_id#106]
Keys [1]: [web_site_id#106]
Functions [4]: [partial_sum(UnscaledValue(sales_price#84)), partial_sum(UnscaledValue(return_amt#86)), partial_sum(UnscaledValue(profit#85)), partial_sum(UnscaledValue(net_loss#87))]

(129) ColumnarToRow [codegen id : 22]
Input [5]: [web_site_id#106, sum#182, sum#183, sum#184, sum#185]

(130) Exchange
Input [5]: [web_site_id#106, sum#182, sum#183, sum#184, sum#185]
Arguments: hashpartitioning(web_site_id#106, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(131) HashAggregate [codegen id : 23]
Input [5]: [web_site_id#106, sum#182, sum#183, sum#184, sum#185]
Keys [1]: [web_site_id#106]
Functions [4]: [sum(UnscaledValue(sales_price#84)), sum(UnscaledValue(return_amt#86)), sum(UnscaledValue(profit#85)), sum(UnscaledValue(net_loss#87))]
Aggregate Attributes [4]: [sum(UnscaledValue(sales_price#84))#111, sum(UnscaledValue(return_amt#86))#112, sum(UnscaledValue(profit#85))#113, sum(UnscaledValue(net_loss#87))#114]
Results [5]: [web channel AS channel#115, concat(web_site, web_site_id#106) AS id#116, MakeDecimal(sum(UnscaledValue(sales_price#84))#111,17,2) AS sales#117, MakeDecimal(sum(UnscaledValue(return_amt#86))#112,17,2) AS returns#118, (MakeDecimal(sum(UnscaledValue(profit#85))#113,17,2) - MakeDecimal(sum(UnscaledValue(net_loss#87))#114,17,2)) AS profit#119]

(132) Union

(133) HashAggregate [codegen id : 24]
Input [5]: [channel#34, id#35, sales#36, returns#37, profit#38]
Keys [2]: [channel#34, id#35]
Functions [3]: [partial_sum(sales#36), partial_sum(returns#37), partial_sum(profit#38)]
Aggregate Attributes [6]: [sum#120, isEmpty#121, sum#122, isEmpty#123, sum#124, isEmpty#125]
Results [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]

(134) Exchange
Input [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Arguments: hashpartitioning(channel#34, id#35, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(135) HashAggregate [codegen id : 25]
Input [8]: [channel#34, id#35, sum#126, isEmpty#127, sum#128, isEmpty#129, sum#130, isEmpty#131]
Keys [2]: [channel#34, id#35]
Functions [3]: [sum(sales#36), sum(returns#37), sum(profit#38)]
Aggregate Attributes [3]: [sum(sales#36)#132, sum(returns#37)#133, sum(profit#38)#134]
Results [3]: [sum(sales#36)#132 AS sales#151, sum(returns#37)#133 AS returns#152, sum(profit#38)#134 AS profit#153]

(136) HashAggregate [codegen id : 25]
Input [3]: [sales#151, returns#152, profit#153]
Keys: []
Functions [3]: [partial_sum(sales#151), partial_sum(returns#152), partial_sum(profit#153)]
Aggregate Attributes [6]: [sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]
Results [6]: [sum#192, isEmpty#193, sum#194, isEmpty#195, sum#196, isEmpty#197]

(137) Exchange
Input [6]: [sum#192, isEmpty#193, sum#194, isEmpty#195, sum#196, isEmpty#197]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(138) HashAggregate [codegen id : 26]
Input [6]: [sum#192, isEmpty#193, sum#194, isEmpty#195, sum#196, isEmpty#197]
Keys: []
Functions [3]: [sum(sales#151), sum(returns#152), sum(profit#153)]
Aggregate Attributes [3]: [sum(sales#151)#198, sum(returns#152)#199, sum(profit#153)#200]
Results [5]: [null AS channel#201, null AS id#202, sum(sales#151)#198 AS sum(sales)#203, sum(returns#152)#199 AS sum(returns)#204, sum(profit#153)#200 AS sum(profit)#205]

(139) Union

(140) HashAggregate [codegen id : 27]
Input [5]: [channel#34, id#35, sales#135, returns#136, profit#137]
Keys [5]: [channel#34, id#35, sales#135, returns#136, profit#137]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#34, id#35, sales#135, returns#136, profit#137]

(141) Exchange
Input [5]: [channel#34, id#35, sales#135, returns#136, profit#137]
Arguments: hashpartitioning(channel#34, id#35, sales#135, returns#136, profit#137, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(142) HashAggregate [codegen id : 28]
Input [5]: [channel#34, id#35, sales#135, returns#136, profit#137]
Keys [5]: [channel#34, id#35, sales#135, returns#136, profit#137]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#34, id#35, sales#135, returns#136, profit#137]

(143) TakeOrderedAndProject
Input [5]: [channel#34, id#35, sales#135, returns#136, profit#137]
Arguments: 100, [channel#34 ASC NULLS FIRST, id#35 ASC NULLS FIRST], [channel#34, id#35, sales#135, returns#136, profit#137]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (148)
+- * ColumnarToRow (147)
   +- CometProject (146)
      +- CometFilter (145)
         +- CometScan parquet spark_catalog.default.date_dim (144)


(144) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_date#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-08-18), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(145) CometFilter
Input [2]: [d_date_sk#22, d_date#23]
Condition : (((isnotnull(d_date#23) AND (d_date#23 >= 1998-08-04)) AND (d_date#23 <= 1998-08-18)) AND isnotnull(d_date_sk#22))

(146) CometProject
Input [2]: [d_date_sk#22, d_date#23]
Arguments: [d_date_sk#22], [d_date_sk#22]

(147) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#22]

(148) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 4 Hosting Expression = sr_returned_date_sk#15 IN dynamicpruning#5

Subquery:3 Hosting operator id = 23 Hosting Expression = cs_sold_date_sk#42 IN dynamicpruning#5

Subquery:4 Hosting operator id = 26 Hosting Expression = cr_returned_date_sk#53 IN dynamicpruning#5

Subquery:5 Hosting operator id = 45 Hosting Expression = ws_sold_date_sk#80 IN dynamicpruning#5

Subquery:6 Hosting operator id = 48 Hosting Expression = wr_returned_date_sk#92 IN dynamicpruning#5

Subquery:7 Hosting operator id = 79 Hosting Expression = ws_sold_date_sk#80 IN dynamicpruning#5

Subquery:8 Hosting operator id = 82 Hosting Expression = wr_returned_date_sk#92 IN dynamicpruning#5

Subquery:9 Hosting operator id = 111 Hosting Expression = ws_sold_date_sk#80 IN dynamicpruning#5

Subquery:10 Hosting operator id = 114 Hosting Expression = wr_returned_date_sk#92 IN dynamicpruning#5


