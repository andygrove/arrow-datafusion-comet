== Physical Plan ==
TakeOrderedAndProject (133)
+- * HashAggregate (132)
   +- Exchange (131)
      +- * HashAggregate (130)
         +- Union (129)
            :- * HashAggregate (108)
            :  +- Exchange (107)
            :     +- * HashAggregate (106)
            :        +- Union (105)
            :           :- * Filter (74)
            :           :  +- * HashAggregate (73)
            :           :     +- Exchange (72)
            :           :        +- * HashAggregate (71)
            :           :           +- * Project (70)
            :           :              +- * BroadcastHashJoin Inner BuildRight (69)
            :           :                 :- * Project (67)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (66)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (59)
            :           :                 :     :  :- * ColumnarToRow (3)
            :           :                 :     :  :  +- CometFilter (2)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (58)
            :           :                 :     :     +- * Project (57)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (56)
            :           :                 :     :           :- * ColumnarToRow (6)
            :           :                 :     :           :  +- CometFilter (5)
            :           :                 :     :           :     +- CometScan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (55)
            :           :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (54)
            :           :                 :     :                 :- * HashAggregate (38)
            :           :                 :     :                 :  +- Exchange (37)
            :           :                 :     :                 :     +- * ColumnarToRow (36)
            :           :                 :     :                 :        +- CometHashAggregate (35)
            :           :                 :     :                 :           +- CometProject (34)
            :           :                 :     :                 :              +- CometBroadcastHashJoin (33)
            :           :                 :     :                 :                 :- CometProject (28)
            :           :                 :     :                 :                 :  +- CometBroadcastHashJoin (27)
            :           :                 :     :                 :                 :     :- CometFilter (8)
            :           :                 :     :                 :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :                 :     +- CometBroadcastExchange (26)
            :           :                 :     :                 :                 :        +- CometBroadcastHashJoin (25)
            :           :                 :     :                 :                 :           :- CometFilter (10)
            :           :                 :     :                 :                 :           :  +- CometScan parquet spark_catalog.default.item (9)
            :           :                 :     :                 :                 :           +- CometBroadcastExchange (24)
            :           :                 :     :                 :                 :              +- CometProject (23)
            :           :                 :     :                 :                 :                 +- CometBroadcastHashJoin (22)
            :           :                 :     :                 :                 :                    :- CometProject (17)
            :           :                 :     :                 :                 :                    :  +- CometBroadcastHashJoin (16)
            :           :                 :     :                 :                 :                    :     :- CometFilter (12)
            :           :                 :     :                 :                 :                    :     :  +- CometScan parquet spark_catalog.default.catalog_sales (11)
            :           :                 :     :                 :                 :                    :     +- CometBroadcastExchange (15)
            :           :                 :     :                 :                 :                    :        +- CometFilter (14)
            :           :                 :     :                 :                 :                    :           +- CometScan parquet spark_catalog.default.item (13)
            :           :                 :     :                 :                 :                    +- CometBroadcastExchange (21)
            :           :                 :     :                 :                 :                       +- CometProject (20)
            :           :                 :     :                 :                 :                          +- CometFilter (19)
            :           :                 :     :                 :                 :                             +- CometScan parquet spark_catalog.default.date_dim (18)
            :           :                 :     :                 :                 +- CometBroadcastExchange (32)
            :           :                 :     :                 :                    +- CometProject (31)
            :           :                 :     :                 :                       +- CometFilter (30)
            :           :                 :     :                 :                          +- CometScan parquet spark_catalog.default.date_dim (29)
            :           :                 :     :                 +- BroadcastExchange (53)
            :           :                 :     :                    +- * ColumnarToRow (52)
            :           :                 :     :                       +- CometProject (51)
            :           :                 :     :                          +- CometBroadcastHashJoin (50)
            :           :                 :     :                             :- CometProject (45)
            :           :                 :     :                             :  +- CometBroadcastHashJoin (44)
            :           :                 :     :                             :     :- CometFilter (40)
            :           :                 :     :                             :     :  +- CometScan parquet spark_catalog.default.web_sales (39)
            :           :                 :     :                             :     +- CometBroadcastExchange (43)
            :           :                 :     :                             :        +- CometFilter (42)
            :           :                 :     :                             :           +- CometScan parquet spark_catalog.default.item (41)
            :           :                 :     :                             +- CometBroadcastExchange (49)
            :           :                 :     :                                +- CometProject (48)
            :           :                 :     :                                   +- CometFilter (47)
            :           :                 :     :                                      +- CometScan parquet spark_catalog.default.date_dim (46)
            :           :                 :     +- BroadcastExchange (65)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (64)
            :           :                 :           :- * ColumnarToRow (62)
            :           :                 :           :  +- CometFilter (61)
            :           :                 :           :     +- CometScan parquet spark_catalog.default.item (60)
            :           :                 :           +- ReusedExchange (63)
            :           :                 +- ReusedExchange (68)
            :           :- * Filter (89)
            :           :  +- * HashAggregate (88)
            :           :     +- Exchange (87)
            :           :        +- * HashAggregate (86)
            :           :           +- * Project (85)
            :           :              +- * BroadcastHashJoin Inner BuildRight (84)
            :           :                 :- * Project (82)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (81)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (79)
            :           :                 :     :  :- * ColumnarToRow (77)
            :           :                 :     :  :  +- CometFilter (76)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (75)
            :           :                 :     :  +- ReusedExchange (78)
            :           :                 :     +- ReusedExchange (80)
            :           :                 +- ReusedExchange (83)
            :           +- * Filter (104)
            :              +- * HashAggregate (103)
            :                 +- Exchange (102)
            :                    +- * HashAggregate (101)
            :                       +- * Project (100)
            :                          +- * BroadcastHashJoin Inner BuildRight (99)
            :                             :- * Project (97)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (96)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (94)
            :                             :     :  :- * ColumnarToRow (92)
            :                             :     :  :  +- CometFilter (91)
            :                             :     :  :     +- CometScan parquet spark_catalog.default.web_sales (90)
            :                             :     :  +- ReusedExchange (93)
            :                             :     +- ReusedExchange (95)
            :                             +- ReusedExchange (98)
            :- * HashAggregate (113)
            :  +- Exchange (112)
            :     +- * HashAggregate (111)
            :        +- * HashAggregate (110)
            :           +- ReusedExchange (109)
            :- * HashAggregate (118)
            :  +- Exchange (117)
            :     +- * HashAggregate (116)
            :        +- * HashAggregate (115)
            :           +- ReusedExchange (114)
            :- * HashAggregate (123)
            :  +- Exchange (122)
            :     +- * HashAggregate (121)
            :        +- * HashAggregate (120)
            :           +- ReusedExchange (119)
            +- * HashAggregate (128)
               +- Exchange (127)
                  +- * HashAggregate (126)
                     +- * HashAggregate (125)
                        +- ReusedExchange (124)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 11]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(10) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(11) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(12) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(15) CometBroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(16) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Right output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner

(17) CometProject
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23], [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(19) CometFilter
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(20) CometProject
Input [2]: [d_date_sk#24, d_year#25]
Arguments: [d_date_sk#24], [d_date_sk#24]

(21) CometBroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: [d_date_sk#24]

(22) CometBroadcastHashJoin
Left output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#18], [d_date_sk#24], Inner

(23) CometProject
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23], [i_brand_id#21, i_class_id#22, i_category_id#23]

(24) CometBroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23]

(25) CometBroadcastHashJoin
Left output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)], [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)], LeftSemi

(26) CometBroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(27) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Right output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_item_sk#10], [i_item_sk#13], Inner

(28) CometProject
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16], [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]

(29) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(30) CometFilter
Input [2]: [d_date_sk#26, d_year#27]
Condition : (((isnotnull(d_year#27) AND (d_year#27 >= 1999)) AND (d_year#27 <= 2001)) AND isnotnull(d_date_sk#26))

(31) CometProject
Input [2]: [d_date_sk#26, d_year#27]
Arguments: [d_date_sk#26], [d_date_sk#26]

(32) CometBroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: [d_date_sk#26]

(33) CometBroadcastHashJoin
Left output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [1]: [d_date_sk#26]
Arguments: [ss_sold_date_sk#11], [d_date_sk#26], Inner

(34) CometProject
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#26]
Arguments: [brand_id#28, class_id#29, category_id#30], [i_brand_id#14 AS brand_id#28, i_class_id#15 AS class_id#29, i_category_id#16 AS category_id#30]

(35) CometHashAggregate
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []

(36) ColumnarToRow [codegen id : 1]
Input [3]: [brand_id#28, class_id#29, category_id#30]

(37) Exchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: hashpartitioning(brand_id#28, class_id#29, category_id#30, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(38) HashAggregate [codegen id : 3]
Input [3]: [brand_id#28, class_id#29, category_id#30]
Keys [3]: [brand_id#28, class_id#29, category_id#30]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#28, class_id#29, category_id#30]

(39) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#32), dynamicpruningexpression(ws_sold_date_sk#32 IN dynamicpruning#33)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(40) CometFilter
Input [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Condition : isnotnull(ws_item_sk#31)

(41) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(42) CometFilter
Input [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Condition : isnotnull(i_item_sk#34)

(43) CometBroadcastExchange
Input [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]

(44) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#31, ws_sold_date_sk#32]
Right output [4]: [i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: [ws_item_sk#31], [i_item_sk#34], Inner

(45) CometProject
Input [6]: [ws_item_sk#31, ws_sold_date_sk#32, i_item_sk#34, i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37], [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37]

(46) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#38, d_year#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(47) CometFilter
Input [2]: [d_date_sk#38, d_year#39]
Condition : (((isnotnull(d_year#39) AND (d_year#39 >= 1999)) AND (d_year#39 <= 2001)) AND isnotnull(d_date_sk#38))

(48) CometProject
Input [2]: [d_date_sk#38, d_year#39]
Arguments: [d_date_sk#38], [d_date_sk#38]

(49) CometBroadcastExchange
Input [1]: [d_date_sk#38]
Arguments: [d_date_sk#38]

(50) CometBroadcastHashJoin
Left output [4]: [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37]
Right output [1]: [d_date_sk#38]
Arguments: [ws_sold_date_sk#32], [d_date_sk#38], Inner

(51) CometProject
Input [5]: [ws_sold_date_sk#32, i_brand_id#35, i_class_id#36, i_category_id#37, d_date_sk#38]
Arguments: [i_brand_id#35, i_class_id#36, i_category_id#37], [i_brand_id#35, i_class_id#36, i_category_id#37]

(52) ColumnarToRow [codegen id : 2]
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]

(53) BroadcastExchange
Input [3]: [i_brand_id#35, i_class_id#36, i_category_id#37]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(54) BroadcastHashJoin [codegen id : 3]
Left keys [6]: [coalesce(brand_id#28, 0), isnull(brand_id#28), coalesce(class_id#29, 0), isnull(class_id#29), coalesce(category_id#30, 0), isnull(category_id#30)]
Right keys [6]: [coalesce(i_brand_id#35, 0), isnull(i_brand_id#35), coalesce(i_class_id#36, 0), isnull(i_class_id#36), coalesce(i_category_id#37, 0), isnull(i_category_id#37)]
Join type: LeftSemi
Join condition: None

(55) BroadcastExchange
Input [3]: [brand_id#28, class_id#29, category_id#30]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=3]

(56) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#28, class_id#29, category_id#30]
Join type: Inner
Join condition: None

(57) Project [codegen id : 4]
Output [1]: [i_item_sk#6 AS ss_item_sk#40]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#28, class_id#29, category_id#30]

(58) BroadcastExchange
Input [1]: [ss_item_sk#40]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(59) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(60) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(61) CometFilter
Input [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]
Condition : isnotnull(i_item_sk#41)

(62) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]

(63) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#40]

(64) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#41]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(65) BroadcastExchange
Input [4]: [i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(66) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#41]
Join type: Inner
Join condition: None

(67) Project [codegen id : 11]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#42, i_class_id#43, i_category_id#44]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#41, i_brand_id#42, i_class_id#43, i_category_id#44]

(68) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#45]

(69) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#45]
Join type: Inner
Join condition: None

(70) Project [codegen id : 11]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#42, i_class_id#43, i_category_id#44]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#42, i_class_id#43, i_category_id#44, d_date_sk#45]

(71) HashAggregate [codegen id : 11]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#42, i_class_id#43, i_category_id#44]
Keys [3]: [i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#46, isEmpty#47, count#48]
Results [6]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum#49, isEmpty#50, count#51]

(72) Exchange
Input [6]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum#49, isEmpty#50, count#51]
Arguments: hashpartitioning(i_brand_id#42, i_class_id#43, i_category_id#44, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(73) HashAggregate [codegen id : 12]
Input [6]: [i_brand_id#42, i_class_id#43, i_category_id#44, sum#49, isEmpty#50, count#51]
Keys [3]: [i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#52, count(1)#53]
Results [6]: [store AS channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#52 AS sales#55, count(1)#53 AS number_sales#56]

(74) Filter [codegen id : 12]
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sales#55, number_sales#56]
Condition : (isnotnull(sales#55) AND (cast(sales#55 as decimal(32,6)) > cast(Subquery scalar-subquery#57, [id=#58] as decimal(32,6))))

(75) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#62), dynamicpruningexpression(cs_sold_date_sk#62 IN dynamicpruning#63)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(76) CometFilter
Input [4]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62]
Condition : isnotnull(cs_item_sk#59)

(77) ColumnarToRow [codegen id : 23]
Input [4]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62]

(78) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#40]

(79) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#59]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(80) ReusedExchange [Reuses operator id: 65]
Output [4]: [i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67]

(81) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#59]
Right keys [1]: [i_item_sk#64]
Join type: Inner
Join condition: None

(82) Project [codegen id : 23]
Output [6]: [cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [8]: [cs_item_sk#59, cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62, i_item_sk#64, i_brand_id#65, i_class_id#66, i_category_id#67]

(83) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#68]

(84) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#62]
Right keys [1]: [d_date_sk#68]
Join type: Inner
Join condition: None

(85) Project [codegen id : 23]
Output [5]: [cs_quantity#60, cs_list_price#61, i_brand_id#65, i_class_id#66, i_category_id#67]
Input [7]: [cs_quantity#60, cs_list_price#61, cs_sold_date_sk#62, i_brand_id#65, i_class_id#66, i_category_id#67, d_date_sk#68]

(86) HashAggregate [codegen id : 23]
Input [5]: [cs_quantity#60, cs_list_price#61, i_brand_id#65, i_class_id#66, i_category_id#67]
Keys [3]: [i_brand_id#65, i_class_id#66, i_category_id#67]
Functions [2]: [partial_sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61)), partial_count(1)]
Aggregate Attributes [3]: [sum#69, isEmpty#70, count#71]
Results [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]

(87) Exchange
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]
Arguments: hashpartitioning(i_brand_id#65, i_class_id#66, i_category_id#67, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(88) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#65, i_class_id#66, i_category_id#67, sum#72, isEmpty#73, count#74]
Keys [3]: [i_brand_id#65, i_class_id#66, i_category_id#67]
Functions [2]: [sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61))#75, count(1)#76]
Results [6]: [catalog AS channel#77, i_brand_id#65, i_class_id#66, i_category_id#67, sum((cast(cs_quantity#60 as decimal(10,0)) * cs_list_price#61))#75 AS sales#78, count(1)#76 AS number_sales#79]

(89) Filter [codegen id : 24]
Input [6]: [channel#77, i_brand_id#65, i_class_id#66, i_category_id#67, sales#78, number_sales#79]
Condition : (isnotnull(sales#78) AND (cast(sales#78 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#57, [id=#58] as decimal(32,6))))

(90) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#80, ws_quantity#81, ws_list_price#82, ws_sold_date_sk#83]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#83), dynamicpruningexpression(ws_sold_date_sk#83 IN dynamicpruning#84)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(91) CometFilter
Input [4]: [ws_item_sk#80, ws_quantity#81, ws_list_price#82, ws_sold_date_sk#83]
Condition : isnotnull(ws_item_sk#80)

(92) ColumnarToRow [codegen id : 35]
Input [4]: [ws_item_sk#80, ws_quantity#81, ws_list_price#82, ws_sold_date_sk#83]

(93) ReusedExchange [Reuses operator id: 58]
Output [1]: [ss_item_sk#40]

(94) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#80]
Right keys [1]: [ss_item_sk#40]
Join type: LeftSemi
Join condition: None

(95) ReusedExchange [Reuses operator id: 65]
Output [4]: [i_item_sk#85, i_brand_id#86, i_class_id#87, i_category_id#88]

(96) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#80]
Right keys [1]: [i_item_sk#85]
Join type: Inner
Join condition: None

(97) Project [codegen id : 35]
Output [6]: [ws_quantity#81, ws_list_price#82, ws_sold_date_sk#83, i_brand_id#86, i_class_id#87, i_category_id#88]
Input [8]: [ws_item_sk#80, ws_quantity#81, ws_list_price#82, ws_sold_date_sk#83, i_item_sk#85, i_brand_id#86, i_class_id#87, i_category_id#88]

(98) ReusedExchange [Reuses operator id: 169]
Output [1]: [d_date_sk#89]

(99) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#83]
Right keys [1]: [d_date_sk#89]
Join type: Inner
Join condition: None

(100) Project [codegen id : 35]
Output [5]: [ws_quantity#81, ws_list_price#82, i_brand_id#86, i_class_id#87, i_category_id#88]
Input [7]: [ws_quantity#81, ws_list_price#82, ws_sold_date_sk#83, i_brand_id#86, i_class_id#87, i_category_id#88, d_date_sk#89]

(101) HashAggregate [codegen id : 35]
Input [5]: [ws_quantity#81, ws_list_price#82, i_brand_id#86, i_class_id#87, i_category_id#88]
Keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Functions [2]: [partial_sum((cast(ws_quantity#81 as decimal(10,0)) * ws_list_price#82)), partial_count(1)]
Aggregate Attributes [3]: [sum#90, isEmpty#91, count#92]
Results [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#93, isEmpty#94, count#95]

(102) Exchange
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#93, isEmpty#94, count#95]
Arguments: hashpartitioning(i_brand_id#86, i_class_id#87, i_category_id#88, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(103) HashAggregate [codegen id : 36]
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#93, isEmpty#94, count#95]
Keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Functions [2]: [sum((cast(ws_quantity#81 as decimal(10,0)) * ws_list_price#82)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#81 as decimal(10,0)) * ws_list_price#82))#96, count(1)#97]
Results [6]: [web AS channel#98, i_brand_id#86, i_class_id#87, i_category_id#88, sum((cast(ws_quantity#81 as decimal(10,0)) * ws_list_price#82))#96 AS sales#99, count(1)#97 AS number_sales#100]

(104) Filter [codegen id : 36]
Input [6]: [channel#98, i_brand_id#86, i_class_id#87, i_category_id#88, sales#99, number_sales#100]
Condition : (isnotnull(sales#99) AND (cast(sales#99 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#57, [id=#58] as decimal(32,6))))

(105) Union

(106) HashAggregate [codegen id : 37]
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sales#55, number_sales#56]
Keys [4]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [partial_sum(sales#55), partial_sum(number_sales#56)]
Aggregate Attributes [3]: [sum#101, isEmpty#102, sum#103]
Results [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]

(107) Exchange
Input [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]
Arguments: hashpartitioning(channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(108) HashAggregate [codegen id : 38]
Input [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum(sales#55), sum(number_sales#56)]
Aggregate Attributes [2]: [sum(sales#55)#107, sum(number_sales#56)#108]
Results [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum(sales#55)#107 AS sum_sales#109, sum(number_sales#56)#108 AS number_sales#110]

(109) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]

(110) HashAggregate [codegen id : 76]
Input [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum(sales#55), sum(number_sales#56)]
Aggregate Attributes [2]: [sum(sales#55)#107, sum(number_sales#56)#108]
Results [5]: [channel#54, i_brand_id#42, i_class_id#43, sum(sales#55)#107 AS sum_sales#109, sum(number_sales#56)#108 AS number_sales#110]

(111) HashAggregate [codegen id : 76]
Input [5]: [channel#54, i_brand_id#42, i_class_id#43, sum_sales#109, number_sales#110]
Keys [3]: [channel#54, i_brand_id#42, i_class_id#43]
Functions [2]: [partial_sum(sum_sales#109), partial_sum(number_sales#110)]
Aggregate Attributes [3]: [sum#111, isEmpty#112, sum#113]
Results [6]: [channel#54, i_brand_id#42, i_class_id#43, sum#114, isEmpty#115, sum#116]

(112) Exchange
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, sum#114, isEmpty#115, sum#116]
Arguments: hashpartitioning(channel#54, i_brand_id#42, i_class_id#43, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(113) HashAggregate [codegen id : 77]
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, sum#114, isEmpty#115, sum#116]
Keys [3]: [channel#54, i_brand_id#42, i_class_id#43]
Functions [2]: [sum(sum_sales#109), sum(number_sales#110)]
Aggregate Attributes [2]: [sum(sum_sales#109)#117, sum(number_sales#110)#118]
Results [6]: [channel#54, i_brand_id#42, i_class_id#43, null AS i_category_id#119, sum(sum_sales#109)#117 AS sum(sum_sales)#120, sum(number_sales#110)#118 AS sum(number_sales)#121]

(114) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]

(115) HashAggregate [codegen id : 115]
Input [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum(sales#55), sum(number_sales#56)]
Aggregate Attributes [2]: [sum(sales#55)#107, sum(number_sales#56)#108]
Results [4]: [channel#54, i_brand_id#42, sum(sales#55)#107 AS sum_sales#109, sum(number_sales#56)#108 AS number_sales#110]

(116) HashAggregate [codegen id : 115]
Input [4]: [channel#54, i_brand_id#42, sum_sales#109, number_sales#110]
Keys [2]: [channel#54, i_brand_id#42]
Functions [2]: [partial_sum(sum_sales#109), partial_sum(number_sales#110)]
Aggregate Attributes [3]: [sum#122, isEmpty#123, sum#124]
Results [5]: [channel#54, i_brand_id#42, sum#125, isEmpty#126, sum#127]

(117) Exchange
Input [5]: [channel#54, i_brand_id#42, sum#125, isEmpty#126, sum#127]
Arguments: hashpartitioning(channel#54, i_brand_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(118) HashAggregate [codegen id : 116]
Input [5]: [channel#54, i_brand_id#42, sum#125, isEmpty#126, sum#127]
Keys [2]: [channel#54, i_brand_id#42]
Functions [2]: [sum(sum_sales#109), sum(number_sales#110)]
Aggregate Attributes [2]: [sum(sum_sales#109)#128, sum(number_sales#110)#129]
Results [6]: [channel#54, i_brand_id#42, null AS i_class_id#130, null AS i_category_id#131, sum(sum_sales#109)#128 AS sum(sum_sales)#132, sum(number_sales#110)#129 AS sum(number_sales)#133]

(119) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]

(120) HashAggregate [codegen id : 154]
Input [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum(sales#55), sum(number_sales#56)]
Aggregate Attributes [2]: [sum(sales#55)#107, sum(number_sales#56)#108]
Results [3]: [channel#54, sum(sales#55)#107 AS sum_sales#109, sum(number_sales#56)#108 AS number_sales#110]

(121) HashAggregate [codegen id : 154]
Input [3]: [channel#54, sum_sales#109, number_sales#110]
Keys [1]: [channel#54]
Functions [2]: [partial_sum(sum_sales#109), partial_sum(number_sales#110)]
Aggregate Attributes [3]: [sum#134, isEmpty#135, sum#136]
Results [4]: [channel#54, sum#137, isEmpty#138, sum#139]

(122) Exchange
Input [4]: [channel#54, sum#137, isEmpty#138, sum#139]
Arguments: hashpartitioning(channel#54, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(123) HashAggregate [codegen id : 155]
Input [4]: [channel#54, sum#137, isEmpty#138, sum#139]
Keys [1]: [channel#54]
Functions [2]: [sum(sum_sales#109), sum(number_sales#110)]
Aggregate Attributes [2]: [sum(sum_sales#109)#140, sum(number_sales#110)#141]
Results [6]: [channel#54, null AS i_brand_id#142, null AS i_class_id#143, null AS i_category_id#144, sum(sum_sales#109)#140 AS sum(sum_sales)#145, sum(number_sales#110)#141 AS sum(number_sales)#146]

(124) ReusedExchange [Reuses operator id: 107]
Output [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]

(125) HashAggregate [codegen id : 193]
Input [7]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44]
Functions [2]: [sum(sales#55), sum(number_sales#56)]
Aggregate Attributes [2]: [sum(sales#55)#107, sum(number_sales#56)#108]
Results [2]: [sum(sales#55)#107 AS sum_sales#109, sum(number_sales#56)#108 AS number_sales#110]

(126) HashAggregate [codegen id : 193]
Input [2]: [sum_sales#109, number_sales#110]
Keys: []
Functions [2]: [partial_sum(sum_sales#109), partial_sum(number_sales#110)]
Aggregate Attributes [3]: [sum#147, isEmpty#148, sum#149]
Results [3]: [sum#150, isEmpty#151, sum#152]

(127) Exchange
Input [3]: [sum#150, isEmpty#151, sum#152]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(128) HashAggregate [codegen id : 194]
Input [3]: [sum#150, isEmpty#151, sum#152]
Keys: []
Functions [2]: [sum(sum_sales#109), sum(number_sales#110)]
Aggregate Attributes [2]: [sum(sum_sales#109)#153, sum(number_sales#110)#154]
Results [6]: [null AS channel#155, null AS i_brand_id#156, null AS i_class_id#157, null AS i_category_id#158, sum(sum_sales#109)#153 AS sum(sum_sales)#159, sum(number_sales#110)#154 AS sum(number_sales)#160]

(129) Union

(130) HashAggregate [codegen id : 195]
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]
Keys [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]

(131) Exchange
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]
Arguments: hashpartitioning(channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(132) HashAggregate [codegen id : 196]
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]
Keys [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]

(133) TakeOrderedAndProject
Input [6]: [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]
Arguments: 100, [channel#54 ASC NULLS FIRST, i_brand_id#42 ASC NULLS FIRST, i_class_id#43 ASC NULLS FIRST, i_category_id#44 ASC NULLS FIRST], [channel#54, i_brand_id#42, i_class_id#43, i_category_id#44, sum_sales#109, number_sales#110]

===== Subqueries =====

Subquery:1 Hosting operator id = 74 Hosting Expression = Subquery scalar-subquery#57, [id=#58]
* HashAggregate (159)
+- Exchange (158)
   +- * ColumnarToRow (157)
      +- CometHashAggregate (156)
         +- CometUnion (155)
            :- CometProject (140)
            :  +- CometBroadcastHashJoin (139)
            :     :- CometScan parquet spark_catalog.default.store_sales (134)
            :     +- CometBroadcastExchange (138)
            :        +- CometProject (137)
            :           +- CometFilter (136)
            :              +- CometScan parquet spark_catalog.default.date_dim (135)
            :- CometProject (147)
            :  +- CometBroadcastHashJoin (146)
            :     :- CometScan parquet spark_catalog.default.catalog_sales (141)
            :     +- CometBroadcastExchange (145)
            :        +- CometProject (144)
            :           +- CometFilter (143)
            :              +- CometScan parquet spark_catalog.default.date_dim (142)
            +- CometProject (154)
               +- CometBroadcastHashJoin (153)
                  :- CometScan parquet spark_catalog.default.web_sales (148)
                  +- CometBroadcastExchange (152)
                     +- CometProject (151)
                        +- CometFilter (150)
                           +- CometScan parquet spark_catalog.default.date_dim (149)


(134) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#161, ss_list_price#162, ss_sold_date_sk#163]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#163), dynamicpruningexpression(ss_sold_date_sk#163 IN dynamicpruning#164)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(135) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#165, d_year#166]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(136) CometFilter
Input [2]: [d_date_sk#165, d_year#166]
Condition : (((isnotnull(d_year#166) AND (d_year#166 >= 1999)) AND (d_year#166 <= 2001)) AND isnotnull(d_date_sk#165))

(137) CometProject
Input [2]: [d_date_sk#165, d_year#166]
Arguments: [d_date_sk#165], [d_date_sk#165]

(138) CometBroadcastExchange
Input [1]: [d_date_sk#165]
Arguments: [d_date_sk#165]

(139) CometBroadcastHashJoin
Left output [3]: [ss_quantity#161, ss_list_price#162, ss_sold_date_sk#163]
Right output [1]: [d_date_sk#165]
Arguments: [ss_sold_date_sk#163], [d_date_sk#165], Inner

(140) CometProject
Input [4]: [ss_quantity#161, ss_list_price#162, ss_sold_date_sk#163, d_date_sk#165]
Arguments: [quantity#167, list_price#168], [ss_quantity#161 AS quantity#167, ss_list_price#162 AS list_price#168]

(141) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#169, cs_list_price#170, cs_sold_date_sk#171]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#171), dynamicpruningexpression(cs_sold_date_sk#171 IN dynamicpruning#172)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(142) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#173, d_year#174]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(143) CometFilter
Input [2]: [d_date_sk#173, d_year#174]
Condition : (((isnotnull(d_year#174) AND (d_year#174 >= 1998)) AND (d_year#174 <= 2000)) AND isnotnull(d_date_sk#173))

(144) CometProject
Input [2]: [d_date_sk#173, d_year#174]
Arguments: [d_date_sk#173], [d_date_sk#173]

(145) CometBroadcastExchange
Input [1]: [d_date_sk#173]
Arguments: [d_date_sk#173]

(146) CometBroadcastHashJoin
Left output [3]: [cs_quantity#169, cs_list_price#170, cs_sold_date_sk#171]
Right output [1]: [d_date_sk#173]
Arguments: [cs_sold_date_sk#171], [d_date_sk#173], Inner

(147) CometProject
Input [4]: [cs_quantity#169, cs_list_price#170, cs_sold_date_sk#171, d_date_sk#173]
Arguments: [quantity#175, list_price#176], [cs_quantity#169 AS quantity#175, cs_list_price#170 AS list_price#176]

(148) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#177, ws_list_price#178, ws_sold_date_sk#179]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#179), dynamicpruningexpression(ws_sold_date_sk#179 IN dynamicpruning#180)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(149) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#181, d_year#182]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(150) CometFilter
Input [2]: [d_date_sk#181, d_year#182]
Condition : (((isnotnull(d_year#182) AND (d_year#182 >= 1998)) AND (d_year#182 <= 2000)) AND isnotnull(d_date_sk#181))

(151) CometProject
Input [2]: [d_date_sk#181, d_year#182]
Arguments: [d_date_sk#181], [d_date_sk#181]

(152) CometBroadcastExchange
Input [1]: [d_date_sk#181]
Arguments: [d_date_sk#181]

(153) CometBroadcastHashJoin
Left output [3]: [ws_quantity#177, ws_list_price#178, ws_sold_date_sk#179]
Right output [1]: [d_date_sk#181]
Arguments: [ws_sold_date_sk#179], [d_date_sk#181], Inner

(154) CometProject
Input [4]: [ws_quantity#177, ws_list_price#178, ws_sold_date_sk#179, d_date_sk#181]
Arguments: [quantity#183, list_price#184], [ws_quantity#177 AS quantity#183, ws_list_price#178 AS list_price#184]

(155) CometUnion
Child 0 Input [2]: [quantity#167, list_price#168]
Child 1 Input [2]: [quantity#175, list_price#176]
Child 2 Input [2]: [quantity#183, list_price#184]

(156) CometHashAggregate
Input [2]: [quantity#167, list_price#168]
Keys: []
Functions [1]: [partial_avg((cast(quantity#167 as decimal(10,0)) * list_price#168))]

(157) ColumnarToRow [codegen id : 1]
Input [2]: [sum#185, count#186]

(158) Exchange
Input [2]: [sum#185, count#186]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(159) HashAggregate [codegen id : 2]
Input [2]: [sum#185, count#186]
Keys: []
Functions [1]: [avg((cast(quantity#167 as decimal(10,0)) * list_price#168))]
Aggregate Attributes [1]: [avg((cast(quantity#167 as decimal(10,0)) * list_price#168))#187]
Results [1]: [avg((cast(quantity#167 as decimal(10,0)) * list_price#168))#187 AS average_sales#188]

Subquery:2 Hosting operator id = 134 Hosting Expression = ss_sold_date_sk#163 IN dynamicpruning#12

Subquery:3 Hosting operator id = 141 Hosting Expression = cs_sold_date_sk#171 IN dynamicpruning#172
BroadcastExchange (164)
+- * ColumnarToRow (163)
   +- CometProject (162)
      +- CometFilter (161)
         +- CometScan parquet spark_catalog.default.date_dim (160)


(160) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#173, d_year#174]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(161) CometFilter
Input [2]: [d_date_sk#173, d_year#174]
Condition : (((isnotnull(d_year#174) AND (d_year#174 >= 1998)) AND (d_year#174 <= 2000)) AND isnotnull(d_date_sk#173))

(162) CometProject
Input [2]: [d_date_sk#173, d_year#174]
Arguments: [d_date_sk#173], [d_date_sk#173]

(163) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#173]

(164) BroadcastExchange
Input [1]: [d_date_sk#173]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:4 Hosting operator id = 148 Hosting Expression = ws_sold_date_sk#179 IN dynamicpruning#172

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (169)
+- * ColumnarToRow (168)
   +- CometProject (167)
      +- CometFilter (166)
         +- CometScan parquet spark_catalog.default.date_dim (165)


(165) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#45, d_year#189, d_moy#190]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(166) CometFilter
Input [3]: [d_date_sk#45, d_year#189, d_moy#190]
Condition : ((((isnotnull(d_year#189) AND isnotnull(d_moy#190)) AND (d_year#189 = 2000)) AND (d_moy#190 = 11)) AND isnotnull(d_date_sk#45))

(167) CometProject
Input [3]: [d_date_sk#45, d_year#189, d_moy#190]
Arguments: [d_date_sk#45], [d_date_sk#45]

(168) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#45]

(169) BroadcastExchange
Input [1]: [d_date_sk#45]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (174)
+- * ColumnarToRow (173)
   +- CometProject (172)
      +- CometFilter (171)
         +- CometScan parquet spark_catalog.default.date_dim (170)


(170) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(171) CometFilter
Input [2]: [d_date_sk#26, d_year#27]
Condition : (((isnotnull(d_year#27) AND (d_year#27 >= 1999)) AND (d_year#27 <= 2001)) AND isnotnull(d_date_sk#26))

(172) CometProject
Input [2]: [d_date_sk#26, d_year#27]
Arguments: [d_date_sk#26], [d_date_sk#26]

(173) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#26]

(174) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=18]

Subquery:7 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#32 IN dynamicpruning#12

Subquery:9 Hosting operator id = 89 Hosting Expression = ReusedSubquery Subquery scalar-subquery#57, [id=#58]

Subquery:10 Hosting operator id = 75 Hosting Expression = cs_sold_date_sk#62 IN dynamicpruning#5

Subquery:11 Hosting operator id = 104 Hosting Expression = ReusedSubquery Subquery scalar-subquery#57, [id=#58]

Subquery:12 Hosting operator id = 90 Hosting Expression = ws_sold_date_sk#83 IN dynamicpruning#5


