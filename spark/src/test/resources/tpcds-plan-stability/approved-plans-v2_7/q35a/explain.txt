== Physical Plan ==
TakeOrderedAndProject (44)
+- * HashAggregate (43)
   +- Exchange (42)
      +- * ColumnarToRow (41)
         +- CometHashAggregate (40)
            +- CometProject (39)
               +- CometBroadcastHashJoin (38)
                  :- CometProject (34)
                  :  +- CometBroadcastHashJoin (33)
                  :     :- CometProject (29)
                  :     :  +- CometBroadcastHashJoin (28)
                  :     :     :- CometBroadcastHashJoin (11)
                  :     :     :  :- CometFilter (2)
                  :     :     :  :  +- CometScan parquet spark_catalog.default.customer (1)
                  :     :     :  +- CometBroadcastExchange (10)
                  :     :     :     +- CometProject (9)
                  :     :     :        +- CometBroadcastHashJoin (8)
                  :     :     :           :- CometScan parquet spark_catalog.default.store_sales (3)
                  :     :     :           +- CometBroadcastExchange (7)
                  :     :     :              +- CometProject (6)
                  :     :     :                 +- CometFilter (5)
                  :     :     :                    +- CometScan parquet spark_catalog.default.date_dim (4)
                  :     :     +- CometBroadcastExchange (27)
                  :     :        +- CometUnion (26)
                  :     :           :- CometProject (18)
                  :     :           :  +- CometBroadcastHashJoin (17)
                  :     :           :     :- CometScan parquet spark_catalog.default.web_sales (12)
                  :     :           :     +- CometBroadcastExchange (16)
                  :     :           :        +- CometProject (15)
                  :     :           :           +- CometFilter (14)
                  :     :           :              +- CometScan parquet spark_catalog.default.date_dim (13)
                  :     :           +- CometProject (25)
                  :     :              +- CometBroadcastHashJoin (24)
                  :     :                 :- CometScan parquet spark_catalog.default.catalog_sales (19)
                  :     :                 +- CometBroadcastExchange (23)
                  :     :                    +- CometProject (22)
                  :     :                       +- CometFilter (21)
                  :     :                          +- CometScan parquet spark_catalog.default.date_dim (20)
                  :     +- CometBroadcastExchange (32)
                  :        +- CometFilter (31)
                  :           +- CometScan parquet spark_catalog.default.customer_address (30)
                  +- CometBroadcastExchange (37)
                     +- CometFilter (36)
                        +- CometScan parquet spark_catalog.default.customer_demographics (35)


(1) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) CometFilter
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Condition : (isnotnull(c_current_addr_sk#3) AND isnotnull(c_current_cdemo_sk#2))

(3) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<ss_customer_sk:int>

(4) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(5) CometFilter
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Condition : ((((isnotnull(d_year#8) AND isnotnull(d_qoy#9)) AND (d_year#8 = 1999)) AND (d_qoy#9 < 4)) AND isnotnull(d_date_sk#7))

(6) CometProject
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Arguments: [d_date_sk#7], [d_date_sk#7]

(7) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(8) CometBroadcastHashJoin
Left output [2]: [ss_customer_sk#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner

(9) CometProject
Input [3]: [ss_customer_sk#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_customer_sk#4], [ss_customer_sk#4]

(10) CometBroadcastExchange
Input [1]: [ss_customer_sk#4]
Arguments: [ss_customer_sk#4]

(11) CometBroadcastHashJoin
Left output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Right output [1]: [ss_customer_sk#4]
Arguments: [c_customer_sk#1], [ss_customer_sk#4], LeftSemi

(12) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#10, ws_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#11), dynamicpruningexpression(ws_sold_date_sk#11 IN dynamicpruning#12)]
ReadSchema: struct<ws_bill_customer_sk:int>

(13) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#13, d_year#14, d_qoy#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(14) CometFilter
Input [3]: [d_date_sk#13, d_year#14, d_qoy#15]
Condition : ((((isnotnull(d_year#14) AND isnotnull(d_qoy#15)) AND (d_year#14 = 1999)) AND (d_qoy#15 < 4)) AND isnotnull(d_date_sk#13))

(15) CometProject
Input [3]: [d_date_sk#13, d_year#14, d_qoy#15]
Arguments: [d_date_sk#13], [d_date_sk#13]

(16) CometBroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: [d_date_sk#13]

(17) CometBroadcastHashJoin
Left output [2]: [ws_bill_customer_sk#10, ws_sold_date_sk#11]
Right output [1]: [d_date_sk#13]
Arguments: [ws_sold_date_sk#11], [d_date_sk#13], Inner

(18) CometProject
Input [3]: [ws_bill_customer_sk#10, ws_sold_date_sk#11, d_date_sk#13]
Arguments: [customsk#16], [ws_bill_customer_sk#10 AS customsk#16]

(19) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
ReadSchema: struct<cs_ship_customer_sk:int>

(20) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#20, d_year#21, d_qoy#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(21) CometFilter
Input [3]: [d_date_sk#20, d_year#21, d_qoy#22]
Condition : ((((isnotnull(d_year#21) AND isnotnull(d_qoy#22)) AND (d_year#21 = 1999)) AND (d_qoy#22 < 4)) AND isnotnull(d_date_sk#20))

(22) CometProject
Input [3]: [d_date_sk#20, d_year#21, d_qoy#22]
Arguments: [d_date_sk#20], [d_date_sk#20]

(23) CometBroadcastExchange
Input [1]: [d_date_sk#20]
Arguments: [d_date_sk#20]

(24) CometBroadcastHashJoin
Left output [2]: [cs_ship_customer_sk#17, cs_sold_date_sk#18]
Right output [1]: [d_date_sk#20]
Arguments: [cs_sold_date_sk#18], [d_date_sk#20], Inner

(25) CometProject
Input [3]: [cs_ship_customer_sk#17, cs_sold_date_sk#18, d_date_sk#20]
Arguments: [customsk#23], [cs_ship_customer_sk#17 AS customsk#23]

(26) CometUnion
Child 0 Input [1]: [customsk#16]
Child 1 Input [1]: [customsk#23]

(27) CometBroadcastExchange
Input [1]: [customsk#16]
Arguments: [customsk#16]

(28) CometBroadcastHashJoin
Left output [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Right output [1]: [customsk#16]
Arguments: [c_customer_sk#1], [customsk#16], LeftSemi

(29) CometProject
Input [3]: [c_customer_sk#1, c_current_cdemo_sk#2, c_current_addr_sk#3]
Arguments: [c_current_cdemo_sk#2, c_current_addr_sk#3], [c_current_cdemo_sk#2, c_current_addr_sk#3]

(30) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#24, ca_state#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(31) CometFilter
Input [2]: [ca_address_sk#24, ca_state#25]
Condition : isnotnull(ca_address_sk#24)

(32) CometBroadcastExchange
Input [2]: [ca_address_sk#24, ca_state#25]
Arguments: [ca_address_sk#24, ca_state#25]

(33) CometBroadcastHashJoin
Left output [2]: [c_current_cdemo_sk#2, c_current_addr_sk#3]
Right output [2]: [ca_address_sk#24, ca_state#25]
Arguments: [c_current_addr_sk#3], [ca_address_sk#24], Inner

(34) CometProject
Input [4]: [c_current_cdemo_sk#2, c_current_addr_sk#3, ca_address_sk#24, ca_state#25]
Arguments: [c_current_cdemo_sk#2, ca_state#25], [c_current_cdemo_sk#2, ca_state#25]

(35) Scan parquet spark_catalog.default.customer_demographics
Output [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(36) CometFilter
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Condition : isnotnull(cd_demo_sk#26)

(37) CometBroadcastExchange
Input [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]

(38) CometBroadcastHashJoin
Left output [2]: [c_current_cdemo_sk#2, ca_state#25]
Right output [6]: [cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: [c_current_cdemo_sk#2], [cd_demo_sk#26], Inner

(39) CometProject
Input [8]: [c_current_cdemo_sk#2, ca_state#25, cd_demo_sk#26, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Arguments: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31], [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]

(40) CometHashAggregate
Input [6]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Keys [6]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Functions [10]: [partial_count(1), partial_avg(cd_dep_count#29), partial_max(cd_dep_count#29), partial_sum(cd_dep_count#29), partial_avg(cd_dep_employed_count#30), partial_max(cd_dep_employed_count#30), partial_sum(cd_dep_employed_count#30), partial_avg(cd_dep_college_count#31), partial_max(cd_dep_college_count#31), partial_sum(cd_dep_college_count#31)]

(41) ColumnarToRow [codegen id : 1]
Input [19]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#32, sum#33, count#34, max#35, sum#36, sum#37, count#38, max#39, sum#40, sum#41, count#42, max#43, sum#44]

(42) Exchange
Input [19]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#32, sum#33, count#34, max#35, sum#36, sum#37, count#38, max#39, sum#40, sum#41, count#42, max#43, sum#44]
Arguments: hashpartitioning(ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(43) HashAggregate [codegen id : 2]
Input [19]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31, count#32, sum#33, count#34, max#35, sum#36, sum#37, count#38, max#39, sum#40, sum#41, count#42, max#43, sum#44]
Keys [6]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cd_dep_employed_count#30, cd_dep_college_count#31]
Functions [10]: [count(1), avg(cd_dep_count#29), max(cd_dep_count#29), sum(cd_dep_count#29), avg(cd_dep_employed_count#30), max(cd_dep_employed_count#30), sum(cd_dep_employed_count#30), avg(cd_dep_college_count#31), max(cd_dep_college_count#31), sum(cd_dep_college_count#31)]
Aggregate Attributes [10]: [count(1)#45, avg(cd_dep_count#29)#46, max(cd_dep_count#29)#47, sum(cd_dep_count#29)#48, avg(cd_dep_employed_count#30)#49, max(cd_dep_employed_count#30)#50, sum(cd_dep_employed_count#30)#51, avg(cd_dep_college_count#31)#52, max(cd_dep_college_count#31)#53, sum(cd_dep_college_count#31)#54]
Results [18]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, count(1)#45 AS cnt1#55, avg(cd_dep_count#29)#46 AS avg(cd_dep_count)#56, max(cd_dep_count#29)#47 AS max(cd_dep_count)#57, sum(cd_dep_count#29)#48 AS sum(cd_dep_count)#58, cd_dep_employed_count#30, count(1)#45 AS cnt2#59, avg(cd_dep_employed_count#30)#49 AS avg(cd_dep_employed_count)#60, max(cd_dep_employed_count#30)#50 AS max(cd_dep_employed_count)#61, sum(cd_dep_employed_count#30)#51 AS sum(cd_dep_employed_count)#62, cd_dep_college_count#31, count(1)#45 AS cnt3#63, avg(cd_dep_college_count#31)#52 AS avg(cd_dep_college_count)#64, max(cd_dep_college_count#31)#53 AS max(cd_dep_college_count)#65, sum(cd_dep_college_count#31)#54 AS sum(cd_dep_college_count)#66]

(44) TakeOrderedAndProject
Input [18]: [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cnt1#55, avg(cd_dep_count)#56, max(cd_dep_count)#57, sum(cd_dep_count)#58, cd_dep_employed_count#30, cnt2#59, avg(cd_dep_employed_count)#60, max(cd_dep_employed_count)#61, sum(cd_dep_employed_count)#62, cd_dep_college_count#31, cnt3#63, avg(cd_dep_college_count)#64, max(cd_dep_college_count)#65, sum(cd_dep_college_count)#66]
Arguments: 100, [ca_state#25 ASC NULLS FIRST, cd_gender#27 ASC NULLS FIRST, cd_marital_status#28 ASC NULLS FIRST, cd_dep_count#29 ASC NULLS FIRST, cd_dep_employed_count#30 ASC NULLS FIRST, cd_dep_college_count#31 ASC NULLS FIRST], [ca_state#25, cd_gender#27, cd_marital_status#28, cd_dep_count#29, cnt1#55, avg(cd_dep_count)#56, max(cd_dep_count)#57, sum(cd_dep_count)#58, cd_dep_employed_count#30, cnt2#59, avg(cd_dep_employed_count)#60, max(cd_dep_employed_count)#61, sum(cd_dep_employed_count)#62, cd_dep_college_count#31, cnt3#63, avg(cd_dep_college_count)#64, max(cd_dep_college_count)#65, sum(cd_dep_college_count)#66]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (49)
+- * ColumnarToRow (48)
   +- CometProject (47)
      +- CometFilter (46)
         +- CometScan parquet spark_catalog.default.date_dim (45)


(45) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,1999), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(46) CometFilter
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Condition : ((((isnotnull(d_year#8) AND isnotnull(d_qoy#9)) AND (d_year#8 = 1999)) AND (d_qoy#9 < 4)) AND isnotnull(d_date_sk#7))

(47) CometProject
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Arguments: [d_date_sk#7], [d_date_sk#7]

(48) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(49) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

Subquery:2 Hosting operator id = 12 Hosting Expression = ws_sold_date_sk#11 IN dynamicpruning#6

Subquery:3 Hosting operator id = 19 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#6


