== Physical Plan ==
TakeOrderedAndProject (155)
+- * Project (154)
   +- * SortMergeJoin Inner (153)
      :- * Sort (82)
      :  +- Exchange (81)
      :     +- * Filter (80)
      :        +- * HashAggregate (79)
      :           +- Exchange (78)
      :              +- * HashAggregate (77)
      :                 +- * HashAggregate (76)
      :                    +- Exchange (75)
      :                       +- * HashAggregate (74)
      :                          +- Union (73)
      :                             :- * Project (24)
      :                             :  +- * SortMergeJoin LeftOuter (23)
      :                             :     :- * Sort (16)
      :                             :     :  +- Exchange (15)
      :                             :     :     +- * ColumnarToRow (14)
      :                             :     :        +- CometProject (13)
      :                             :     :           +- CometBroadcastHashJoin (12)
      :                             :     :              :- CometProject (8)
      :                             :     :              :  +- CometBroadcastHashJoin (7)
      :                             :     :              :     :- CometFilter (2)
      :                             :     :              :     :  +- CometScan parquet spark_catalog.default.catalog_sales (1)
      :                             :     :              :     +- CometBroadcastExchange (6)
      :                             :     :              :        +- CometProject (5)
      :                             :     :              :           +- CometFilter (4)
      :                             :     :              :              +- CometScan parquet spark_catalog.default.item (3)
      :                             :     :              +- CometBroadcastExchange (11)
      :                             :     :                 +- CometFilter (10)
      :                             :     :                    +- CometScan parquet spark_catalog.default.date_dim (9)
      :                             :     +- * Sort (22)
      :                             :        +- Exchange (21)
      :                             :           +- * ColumnarToRow (20)
      :                             :              +- CometProject (19)
      :                             :                 +- CometFilter (18)
      :                             :                    +- CometScan parquet spark_catalog.default.catalog_returns (17)
      :                             :- * Project (48)
      :                             :  +- * SortMergeJoin LeftOuter (47)
      :                             :     :- * Sort (40)
      :                             :     :  +- Exchange (39)
      :                             :     :     +- * ColumnarToRow (38)
      :                             :     :        +- CometProject (37)
      :                             :     :           +- CometBroadcastHashJoin (36)
      :                             :     :              :- CometProject (32)
      :                             :     :              :  +- CometBroadcastHashJoin (31)
      :                             :     :              :     :- CometFilter (26)
      :                             :     :              :     :  +- CometScan parquet spark_catalog.default.store_sales (25)
      :                             :     :              :     +- CometBroadcastExchange (30)
      :                             :     :              :        +- CometProject (29)
      :                             :     :              :           +- CometFilter (28)
      :                             :     :              :              +- CometScan parquet spark_catalog.default.item (27)
      :                             :     :              +- CometBroadcastExchange (35)
      :                             :     :                 +- CometFilter (34)
      :                             :     :                    +- CometScan parquet spark_catalog.default.date_dim (33)
      :                             :     +- * Sort (46)
      :                             :        +- Exchange (45)
      :                             :           +- * ColumnarToRow (44)
      :                             :              +- CometProject (43)
      :                             :                 +- CometFilter (42)
      :                             :                    +- CometScan parquet spark_catalog.default.store_returns (41)
      :                             +- * Project (72)
      :                                +- * SortMergeJoin LeftOuter (71)
      :                                   :- * Sort (64)
      :                                   :  +- Exchange (63)
      :                                   :     +- * ColumnarToRow (62)
      :                                   :        +- CometProject (61)
      :                                   :           +- CometBroadcastHashJoin (60)
      :                                   :              :- CometProject (56)
      :                                   :              :  +- CometBroadcastHashJoin (55)
      :                                   :              :     :- CometFilter (50)
      :                                   :              :     :  +- CometScan parquet spark_catalog.default.web_sales (49)
      :                                   :              :     +- CometBroadcastExchange (54)
      :                                   :              :        +- CometProject (53)
      :                                   :              :           +- CometFilter (52)
      :                                   :              :              +- CometScan parquet spark_catalog.default.item (51)
      :                                   :              +- CometBroadcastExchange (59)
      :                                   :                 +- CometFilter (58)
      :                                   :                    +- CometScan parquet spark_catalog.default.date_dim (57)
      :                                   +- * Sort (70)
      :                                      +- Exchange (69)
      :                                         +- * ColumnarToRow (68)
      :                                            +- CometProject (67)
      :                                               +- CometFilter (66)
      :                                                  +- CometScan parquet spark_catalog.default.web_returns (65)
      +- * Sort (152)
         +- Exchange (151)
            +- * Filter (150)
               +- * HashAggregate (149)
                  +- Exchange (148)
                     +- * HashAggregate (147)
                        +- * HashAggregate (146)
                           +- Exchange (145)
                              +- * HashAggregate (144)
                                 +- Union (143)
                                    :- * Project (102)
                                    :  +- * SortMergeJoin LeftOuter (101)
                                    :     :- * Sort (98)
                                    :     :  +- Exchange (97)
                                    :     :     +- * ColumnarToRow (96)
                                    :     :        +- CometProject (95)
                                    :     :           +- CometBroadcastHashJoin (94)
                                    :     :              :- CometProject (90)
                                    :     :              :  +- CometBroadcastHashJoin (89)
                                    :     :              :     :- CometFilter (84)
                                    :     :              :     :  +- CometScan parquet spark_catalog.default.catalog_sales (83)
                                    :     :              :     +- CometBroadcastExchange (88)
                                    :     :              :        +- CometProject (87)
                                    :     :              :           +- CometFilter (86)
                                    :     :              :              +- CometScan parquet spark_catalog.default.item (85)
                                    :     :              +- CometBroadcastExchange (93)
                                    :     :                 +- CometFilter (92)
                                    :     :                    +- CometScan parquet spark_catalog.default.date_dim (91)
                                    :     +- * Sort (100)
                                    :        +- ReusedExchange (99)
                                    :- * Project (122)
                                    :  +- * SortMergeJoin LeftOuter (121)
                                    :     :- * Sort (118)
                                    :     :  +- Exchange (117)
                                    :     :     +- * ColumnarToRow (116)
                                    :     :        +- CometProject (115)
                                    :     :           +- CometBroadcastHashJoin (114)
                                    :     :              :- CometProject (110)
                                    :     :              :  +- CometBroadcastHashJoin (109)
                                    :     :              :     :- CometFilter (104)
                                    :     :              :     :  +- CometScan parquet spark_catalog.default.store_sales (103)
                                    :     :              :     +- CometBroadcastExchange (108)
                                    :     :              :        +- CometProject (107)
                                    :     :              :           +- CometFilter (106)
                                    :     :              :              +- CometScan parquet spark_catalog.default.item (105)
                                    :     :              +- CometBroadcastExchange (113)
                                    :     :                 +- CometFilter (112)
                                    :     :                    +- CometScan parquet spark_catalog.default.date_dim (111)
                                    :     +- * Sort (120)
                                    :        +- ReusedExchange (119)
                                    +- * Project (142)
                                       +- * SortMergeJoin LeftOuter (141)
                                          :- * Sort (138)
                                          :  +- Exchange (137)
                                          :     +- * ColumnarToRow (136)
                                          :        +- CometProject (135)
                                          :           +- CometBroadcastHashJoin (134)
                                          :              :- CometProject (130)
                                          :              :  +- CometBroadcastHashJoin (129)
                                          :              :     :- CometFilter (124)
                                          :              :     :  +- CometScan parquet spark_catalog.default.web_sales (123)
                                          :              :     +- CometBroadcastExchange (128)
                                          :              :        +- CometProject (127)
                                          :              :           +- CometFilter (126)
                                          :              :              +- CometScan parquet spark_catalog.default.item (125)
                                          :              +- CometBroadcastExchange (133)
                                          :                 +- CometFilter (132)
                                          :                    +- CometScan parquet spark_catalog.default.date_dim (131)
                                          +- * Sort (140)
                                             +- ReusedExchange (139)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_item_sk#1)

(3) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(4) CometFilter
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Condition : ((((((isnotnull(i_category#11) AND (i_category#11 = Books                                             )) AND isnotnull(i_item_sk#7)) AND isnotnull(i_brand_id#8)) AND isnotnull(i_class_id#9)) AND isnotnull(i_category_id#10)) AND isnotnull(i_manufact_id#12))

(5) CometProject
Input [6]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_category#11, i_manufact_id#12]
Arguments: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12], [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]

(6) CometBroadcastExchange
Input [5]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Arguments: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]

(7) CometBroadcastHashJoin
Left output [5]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5]
Right output [5]: [i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Arguments: [cs_item_sk#1], [i_item_sk#7], Inner

(8) CometProject
Input [10]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_item_sk#7, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Arguments: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12], [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]

(9) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#13, d_year#14]
Condition : ((isnotnull(d_year#14) AND (d_year#14 = 2002)) AND isnotnull(d_date_sk#13))

(11) CometBroadcastExchange
Input [2]: [d_date_sk#13, d_year#14]
Arguments: [d_date_sk#13, d_year#14]

(12) CometBroadcastHashJoin
Left output [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Right output [2]: [d_date_sk#13, d_year#14]
Arguments: [cs_sold_date_sk#5], [d_date_sk#13], Inner

(13) CometProject
Input [11]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, cs_sold_date_sk#5, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_date_sk#13, d_year#14]
Arguments: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#14], [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#14]

(14) ColumnarToRow [codegen id : 1]
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#14]

(15) Exchange
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#14]
Arguments: hashpartitioning(cs_order_number#2, cs_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(16) Sort [codegen id : 2]
Input [9]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#14]
Arguments: [cs_order_number#2 ASC NULLS FIRST, cs_item_sk#1 ASC NULLS FIRST], false, 0

(17) Scan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_returned_date_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_quantity:int,cr_return_amount:decimal(7,2)>

(18) CometFilter
Input [5]: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_returned_date_sk#19]
Condition : (isnotnull(cr_order_number#16) AND isnotnull(cr_item_sk#15))

(19) CometProject
Input [5]: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18, cr_returned_date_sk#19]
Arguments: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18], [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18]

(20) ColumnarToRow [codegen id : 3]
Input [4]: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18]

(21) Exchange
Input [4]: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18]
Arguments: hashpartitioning(cr_order_number#16, cr_item_sk#15, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(22) Sort [codegen id : 4]
Input [4]: [cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18]
Arguments: [cr_order_number#16 ASC NULLS FIRST, cr_item_sk#15 ASC NULLS FIRST], false, 0

(23) SortMergeJoin [codegen id : 5]
Left keys [2]: [cs_order_number#2, cs_item_sk#1]
Right keys [2]: [cr_order_number#16, cr_item_sk#15]
Join type: LeftOuter
Join condition: None

(24) Project [codegen id : 5]
Output [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, (cs_quantity#3 - coalesce(cr_return_quantity#17, 0)) AS sales_cnt#20, (cs_ext_sales_price#4 - coalesce(cr_return_amount#18, 0.00)) AS sales_amt#21]
Input [13]: [cs_item_sk#1, cs_order_number#2, cs_quantity#3, cs_ext_sales_price#4, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, d_year#14, cr_item_sk#15, cr_order_number#16, cr_return_quantity#17, cr_return_amount#18]

(25) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(26) CometFilter
Input [5]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_item_sk#22)

(27) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_category#32, i_manufact_id#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(28) CometFilter
Input [6]: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_category#32, i_manufact_id#33]
Condition : ((((((isnotnull(i_category#32) AND (i_category#32 = Books                                             )) AND isnotnull(i_item_sk#28)) AND isnotnull(i_brand_id#29)) AND isnotnull(i_class_id#30)) AND isnotnull(i_category_id#31)) AND isnotnull(i_manufact_id#33))

(29) CometProject
Input [6]: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_category#32, i_manufact_id#33]
Arguments: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33], [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]

(30) CometBroadcastExchange
Input [5]: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]
Arguments: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]

(31) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Right output [5]: [i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]
Arguments: [ss_item_sk#22], [i_item_sk#28], Inner

(32) CometProject
Input [10]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26, i_item_sk#28, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]
Arguments: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33], [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]

(33) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#34, d_year#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(34) CometFilter
Input [2]: [d_date_sk#34, d_year#35]
Condition : ((isnotnull(d_year#35) AND (d_year#35 = 2002)) AND isnotnull(d_date_sk#34))

(35) CometBroadcastExchange
Input [2]: [d_date_sk#34, d_year#35]
Arguments: [d_date_sk#34, d_year#35]

(36) CometBroadcastHashJoin
Left output [9]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33]
Right output [2]: [d_date_sk#34, d_year#35]
Arguments: [ss_sold_date_sk#26], [d_date_sk#34], Inner

(37) CometProject
Input [11]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, ss_sold_date_sk#26, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_date_sk#34, d_year#35]
Arguments: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_year#35], [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_year#35]

(38) ColumnarToRow [codegen id : 6]
Input [9]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_year#35]

(39) Exchange
Input [9]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_year#35]
Arguments: hashpartitioning(ss_ticket_number#23, ss_item_sk#22, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(40) Sort [codegen id : 7]
Input [9]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_year#35]
Arguments: [ss_ticket_number#23 ASC NULLS FIRST, ss_item_sk#22 ASC NULLS FIRST], false, 0

(41) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39, sr_returned_date_sk#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_quantity:int,sr_return_amt:decimal(7,2)>

(42) CometFilter
Input [5]: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39, sr_returned_date_sk#40]
Condition : (isnotnull(sr_ticket_number#37) AND isnotnull(sr_item_sk#36))

(43) CometProject
Input [5]: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39, sr_returned_date_sk#40]
Arguments: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39], [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39]

(44) ColumnarToRow [codegen id : 8]
Input [4]: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39]

(45) Exchange
Input [4]: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39]
Arguments: hashpartitioning(sr_ticket_number#37, sr_item_sk#36, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(46) Sort [codegen id : 9]
Input [4]: [sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39]
Arguments: [sr_ticket_number#37 ASC NULLS FIRST, sr_item_sk#36 ASC NULLS FIRST], false, 0

(47) SortMergeJoin [codegen id : 10]
Left keys [2]: [ss_ticket_number#23, ss_item_sk#22]
Right keys [2]: [sr_ticket_number#37, sr_item_sk#36]
Join type: LeftOuter
Join condition: None

(48) Project [codegen id : 10]
Output [7]: [d_year#35, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, (ss_quantity#24 - coalesce(sr_return_quantity#38, 0)) AS sales_cnt#41, (ss_ext_sales_price#25 - coalesce(sr_return_amt#39, 0.00)) AS sales_amt#42]
Input [13]: [ss_item_sk#22, ss_ticket_number#23, ss_quantity#24, ss_ext_sales_price#25, i_brand_id#29, i_class_id#30, i_category_id#31, i_manufact_id#33, d_year#35, sr_item_sk#36, sr_ticket_number#37, sr_return_quantity#38, sr_return_amt#39]

(49) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#47), dynamicpruningexpression(ws_sold_date_sk#47 IN dynamicpruning#48)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(50) CometFilter
Input [5]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47]
Condition : isnotnull(ws_item_sk#43)

(51) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_category#53, i_manufact_id#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(52) CometFilter
Input [6]: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_category#53, i_manufact_id#54]
Condition : ((((((isnotnull(i_category#53) AND (i_category#53 = Books                                             )) AND isnotnull(i_item_sk#49)) AND isnotnull(i_brand_id#50)) AND isnotnull(i_class_id#51)) AND isnotnull(i_category_id#52)) AND isnotnull(i_manufact_id#54))

(53) CometProject
Input [6]: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_category#53, i_manufact_id#54]
Arguments: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54], [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]

(54) CometBroadcastExchange
Input [5]: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]
Arguments: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]

(55) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47]
Right output [5]: [i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]
Arguments: [ws_item_sk#43], [i_item_sk#49], Inner

(56) CometProject
Input [10]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47, i_item_sk#49, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]
Arguments: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54], [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]

(57) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#55, d_year#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(58) CometFilter
Input [2]: [d_date_sk#55, d_year#56]
Condition : ((isnotnull(d_year#56) AND (d_year#56 = 2002)) AND isnotnull(d_date_sk#55))

(59) CometBroadcastExchange
Input [2]: [d_date_sk#55, d_year#56]
Arguments: [d_date_sk#55, d_year#56]

(60) CometBroadcastHashJoin
Left output [9]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54]
Right output [2]: [d_date_sk#55, d_year#56]
Arguments: [ws_sold_date_sk#47], [d_date_sk#55], Inner

(61) CometProject
Input [11]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, ws_sold_date_sk#47, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_date_sk#55, d_year#56]
Arguments: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_year#56], [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_year#56]

(62) ColumnarToRow [codegen id : 11]
Input [9]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_year#56]

(63) Exchange
Input [9]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_year#56]
Arguments: hashpartitioning(ws_order_number#44, ws_item_sk#43, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(64) Sort [codegen id : 12]
Input [9]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_year#56]
Arguments: [ws_order_number#44 ASC NULLS FIRST, ws_item_sk#43 ASC NULLS FIRST], false, 0

(65) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60, wr_returned_date_sk#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_quantity:int,wr_return_amt:decimal(7,2)>

(66) CometFilter
Input [5]: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60, wr_returned_date_sk#61]
Condition : (isnotnull(wr_order_number#58) AND isnotnull(wr_item_sk#57))

(67) CometProject
Input [5]: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60, wr_returned_date_sk#61]
Arguments: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60], [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60]

(68) ColumnarToRow [codegen id : 13]
Input [4]: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60]

(69) Exchange
Input [4]: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60]
Arguments: hashpartitioning(wr_order_number#58, wr_item_sk#57, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(70) Sort [codegen id : 14]
Input [4]: [wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60]
Arguments: [wr_order_number#58 ASC NULLS FIRST, wr_item_sk#57 ASC NULLS FIRST], false, 0

(71) SortMergeJoin [codegen id : 15]
Left keys [2]: [ws_order_number#44, ws_item_sk#43]
Right keys [2]: [wr_order_number#58, wr_item_sk#57]
Join type: LeftOuter
Join condition: None

(72) Project [codegen id : 15]
Output [7]: [d_year#56, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, (ws_quantity#45 - coalesce(wr_return_quantity#59, 0)) AS sales_cnt#62, (ws_ext_sales_price#46 - coalesce(wr_return_amt#60, 0.00)) AS sales_amt#63]
Input [13]: [ws_item_sk#43, ws_order_number#44, ws_quantity#45, ws_ext_sales_price#46, i_brand_id#50, i_class_id#51, i_category_id#52, i_manufact_id#54, d_year#56, wr_item_sk#57, wr_order_number#58, wr_return_quantity#59, wr_return_amt#60]

(73) Union

(74) HashAggregate [codegen id : 16]
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]
Keys [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]

(75) Exchange
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]
Arguments: hashpartitioning(d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(76) HashAggregate [codegen id : 17]
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]
Keys [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]

(77) HashAggregate [codegen id : 17]
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#20, sales_amt#21]
Keys [5]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Functions [2]: [partial_sum(sales_cnt#20), partial_sum(UnscaledValue(sales_amt#21))]
Aggregate Attributes [2]: [sum#64, sum#65]
Results [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#66, sum#67]

(78) Exchange
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#66, sum#67]
Arguments: hashpartitioning(d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(79) HashAggregate [codegen id : 18]
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum#66, sum#67]
Keys [5]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Functions [2]: [sum(sales_cnt#20), sum(UnscaledValue(sales_amt#21))]
Aggregate Attributes [2]: [sum(sales_cnt#20)#68, sum(UnscaledValue(sales_amt#21))#69]
Results [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sum(sales_cnt#20)#68 AS sales_cnt#70, MakeDecimal(sum(UnscaledValue(sales_amt#21))#69,18,2) AS sales_amt#71]

(80) Filter [codegen id : 18]
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#70, sales_amt#71]
Condition : isnotnull(sales_cnt#70)

(81) Exchange
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#70, sales_amt#71]
Arguments: hashpartitioning(i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(82) Sort [codegen id : 19]
Input [7]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#70, sales_amt#71]
Arguments: [i_brand_id#8 ASC NULLS FIRST, i_class_id#9 ASC NULLS FIRST, i_category_id#10 ASC NULLS FIRST, i_manufact_id#12 ASC NULLS FIRST], false, 0

(83) Scan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#76), dynamicpruningexpression(cs_sold_date_sk#76 IN dynamicpruning#77)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_ext_sales_price:decimal(7,2)>

(84) CometFilter
Input [5]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76]
Condition : isnotnull(cs_item_sk#72)

(85) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_category#82, i_manufact_id#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(86) CometFilter
Input [6]: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_category#82, i_manufact_id#83]
Condition : ((((((isnotnull(i_category#82) AND (i_category#82 = Books                                             )) AND isnotnull(i_item_sk#78)) AND isnotnull(i_brand_id#79)) AND isnotnull(i_class_id#80)) AND isnotnull(i_category_id#81)) AND isnotnull(i_manufact_id#83))

(87) CometProject
Input [6]: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_category#82, i_manufact_id#83]
Arguments: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83], [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]

(88) CometBroadcastExchange
Input [5]: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Arguments: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]

(89) CometBroadcastHashJoin
Left output [5]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76]
Right output [5]: [i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Arguments: [cs_item_sk#72], [i_item_sk#78], Inner

(90) CometProject
Input [10]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76, i_item_sk#78, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Arguments: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83], [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]

(91) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#84, d_year#85]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(92) CometFilter
Input [2]: [d_date_sk#84, d_year#85]
Condition : ((isnotnull(d_year#85) AND (d_year#85 = 2001)) AND isnotnull(d_date_sk#84))

(93) CometBroadcastExchange
Input [2]: [d_date_sk#84, d_year#85]
Arguments: [d_date_sk#84, d_year#85]

(94) CometBroadcastHashJoin
Left output [9]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Right output [2]: [d_date_sk#84, d_year#85]
Arguments: [cs_sold_date_sk#76], [d_date_sk#84], Inner

(95) CometProject
Input [11]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, cs_sold_date_sk#76, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_date_sk#84, d_year#85]
Arguments: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_year#85], [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_year#85]

(96) ColumnarToRow [codegen id : 20]
Input [9]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_year#85]

(97) Exchange
Input [9]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_year#85]
Arguments: hashpartitioning(cs_order_number#73, cs_item_sk#72, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(98) Sort [codegen id : 21]
Input [9]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_year#85]
Arguments: [cs_order_number#73 ASC NULLS FIRST, cs_item_sk#72 ASC NULLS FIRST], false, 0

(99) ReusedExchange [Reuses operator id: 21]
Output [4]: [cr_item_sk#86, cr_order_number#87, cr_return_quantity#88, cr_return_amount#89]

(100) Sort [codegen id : 23]
Input [4]: [cr_item_sk#86, cr_order_number#87, cr_return_quantity#88, cr_return_amount#89]
Arguments: [cr_order_number#87 ASC NULLS FIRST, cr_item_sk#86 ASC NULLS FIRST], false, 0

(101) SortMergeJoin [codegen id : 24]
Left keys [2]: [cs_order_number#73, cs_item_sk#72]
Right keys [2]: [cr_order_number#87, cr_item_sk#86]
Join type: LeftOuter
Join condition: None

(102) Project [codegen id : 24]
Output [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, (cs_quantity#74 - coalesce(cr_return_quantity#88, 0)) AS sales_cnt#20, (cs_ext_sales_price#75 - coalesce(cr_return_amount#89, 0.00)) AS sales_amt#21]
Input [13]: [cs_item_sk#72, cs_order_number#73, cs_quantity#74, cs_ext_sales_price#75, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, d_year#85, cr_item_sk#86, cr_order_number#87, cr_return_quantity#88, cr_return_amount#89]

(103) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#94), dynamicpruningexpression(ss_sold_date_sk#94 IN dynamicpruning#95)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ticket_number:int,ss_quantity:int,ss_ext_sales_price:decimal(7,2)>

(104) CometFilter
Input [5]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94]
Condition : isnotnull(ss_item_sk#90)

(105) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_category#100, i_manufact_id#101]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(106) CometFilter
Input [6]: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_category#100, i_manufact_id#101]
Condition : ((((((isnotnull(i_category#100) AND (i_category#100 = Books                                             )) AND isnotnull(i_item_sk#96)) AND isnotnull(i_brand_id#97)) AND isnotnull(i_class_id#98)) AND isnotnull(i_category_id#99)) AND isnotnull(i_manufact_id#101))

(107) CometProject
Input [6]: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_category#100, i_manufact_id#101]
Arguments: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101], [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]

(108) CometBroadcastExchange
Input [5]: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]
Arguments: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]

(109) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94]
Right output [5]: [i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]
Arguments: [ss_item_sk#90], [i_item_sk#96], Inner

(110) CometProject
Input [10]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94, i_item_sk#96, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]
Arguments: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101], [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]

(111) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#102, d_year#103]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(112) CometFilter
Input [2]: [d_date_sk#102, d_year#103]
Condition : ((isnotnull(d_year#103) AND (d_year#103 = 2001)) AND isnotnull(d_date_sk#102))

(113) CometBroadcastExchange
Input [2]: [d_date_sk#102, d_year#103]
Arguments: [d_date_sk#102, d_year#103]

(114) CometBroadcastHashJoin
Left output [9]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101]
Right output [2]: [d_date_sk#102, d_year#103]
Arguments: [ss_sold_date_sk#94], [d_date_sk#102], Inner

(115) CometProject
Input [11]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, ss_sold_date_sk#94, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_date_sk#102, d_year#103]
Arguments: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_year#103], [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_year#103]

(116) ColumnarToRow [codegen id : 25]
Input [9]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_year#103]

(117) Exchange
Input [9]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_year#103]
Arguments: hashpartitioning(ss_ticket_number#91, ss_item_sk#90, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(118) Sort [codegen id : 26]
Input [9]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_year#103]
Arguments: [ss_ticket_number#91 ASC NULLS FIRST, ss_item_sk#90 ASC NULLS FIRST], false, 0

(119) ReusedExchange [Reuses operator id: 45]
Output [4]: [sr_item_sk#104, sr_ticket_number#105, sr_return_quantity#106, sr_return_amt#107]

(120) Sort [codegen id : 28]
Input [4]: [sr_item_sk#104, sr_ticket_number#105, sr_return_quantity#106, sr_return_amt#107]
Arguments: [sr_ticket_number#105 ASC NULLS FIRST, sr_item_sk#104 ASC NULLS FIRST], false, 0

(121) SortMergeJoin [codegen id : 29]
Left keys [2]: [ss_ticket_number#91, ss_item_sk#90]
Right keys [2]: [sr_ticket_number#105, sr_item_sk#104]
Join type: LeftOuter
Join condition: None

(122) Project [codegen id : 29]
Output [7]: [d_year#103, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, (ss_quantity#92 - coalesce(sr_return_quantity#106, 0)) AS sales_cnt#41, (ss_ext_sales_price#93 - coalesce(sr_return_amt#107, 0.00)) AS sales_amt#42]
Input [13]: [ss_item_sk#90, ss_ticket_number#91, ss_quantity#92, ss_ext_sales_price#93, i_brand_id#97, i_class_id#98, i_category_id#99, i_manufact_id#101, d_year#103, sr_item_sk#104, sr_ticket_number#105, sr_return_quantity#106, sr_return_amt#107]

(123) Scan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#112), dynamicpruningexpression(ws_sold_date_sk#112 IN dynamicpruning#113)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_order_number:int,ws_quantity:int,ws_ext_sales_price:decimal(7,2)>

(124) CometFilter
Input [5]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112]
Condition : isnotnull(ws_item_sk#108)

(125) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_category#118, i_manufact_id#119]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Books                                             ), IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id), IsNotNull(i_manufact_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int,i_category:string,i_manufact_id:int>

(126) CometFilter
Input [6]: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_category#118, i_manufact_id#119]
Condition : ((((((isnotnull(i_category#118) AND (i_category#118 = Books                                             )) AND isnotnull(i_item_sk#114)) AND isnotnull(i_brand_id#115)) AND isnotnull(i_class_id#116)) AND isnotnull(i_category_id#117)) AND isnotnull(i_manufact_id#119))

(127) CometProject
Input [6]: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_category#118, i_manufact_id#119]
Arguments: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119], [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]

(128) CometBroadcastExchange
Input [5]: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]
Arguments: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]

(129) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112]
Right output [5]: [i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]
Arguments: [ws_item_sk#108], [i_item_sk#114], Inner

(130) CometProject
Input [10]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112, i_item_sk#114, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]
Arguments: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119], [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]

(131) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#120, d_year#121]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(132) CometFilter
Input [2]: [d_date_sk#120, d_year#121]
Condition : ((isnotnull(d_year#121) AND (d_year#121 = 2001)) AND isnotnull(d_date_sk#120))

(133) CometBroadcastExchange
Input [2]: [d_date_sk#120, d_year#121]
Arguments: [d_date_sk#120, d_year#121]

(134) CometBroadcastHashJoin
Left output [9]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119]
Right output [2]: [d_date_sk#120, d_year#121]
Arguments: [ws_sold_date_sk#112], [d_date_sk#120], Inner

(135) CometProject
Input [11]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, ws_sold_date_sk#112, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_date_sk#120, d_year#121]
Arguments: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_year#121], [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_year#121]

(136) ColumnarToRow [codegen id : 30]
Input [9]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_year#121]

(137) Exchange
Input [9]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_year#121]
Arguments: hashpartitioning(ws_order_number#109, ws_item_sk#108, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(138) Sort [codegen id : 31]
Input [9]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_year#121]
Arguments: [ws_order_number#109 ASC NULLS FIRST, ws_item_sk#108 ASC NULLS FIRST], false, 0

(139) ReusedExchange [Reuses operator id: 69]
Output [4]: [wr_item_sk#122, wr_order_number#123, wr_return_quantity#124, wr_return_amt#125]

(140) Sort [codegen id : 33]
Input [4]: [wr_item_sk#122, wr_order_number#123, wr_return_quantity#124, wr_return_amt#125]
Arguments: [wr_order_number#123 ASC NULLS FIRST, wr_item_sk#122 ASC NULLS FIRST], false, 0

(141) SortMergeJoin [codegen id : 34]
Left keys [2]: [ws_order_number#109, ws_item_sk#108]
Right keys [2]: [wr_order_number#123, wr_item_sk#122]
Join type: LeftOuter
Join condition: None

(142) Project [codegen id : 34]
Output [7]: [d_year#121, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, (ws_quantity#110 - coalesce(wr_return_quantity#124, 0)) AS sales_cnt#62, (ws_ext_sales_price#111 - coalesce(wr_return_amt#125, 0.00)) AS sales_amt#63]
Input [13]: [ws_item_sk#108, ws_order_number#109, ws_quantity#110, ws_ext_sales_price#111, i_brand_id#115, i_class_id#116, i_category_id#117, i_manufact_id#119, d_year#121, wr_item_sk#122, wr_order_number#123, wr_return_quantity#124, wr_return_amt#125]

(143) Union

(144) HashAggregate [codegen id : 35]
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]
Keys [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]

(145) Exchange
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]
Arguments: hashpartitioning(d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(146) HashAggregate [codegen id : 36]
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]
Keys [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]
Functions: []
Aggregate Attributes: []
Results [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]

(147) HashAggregate [codegen id : 36]
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#20, sales_amt#21]
Keys [5]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Functions [2]: [partial_sum(sales_cnt#20), partial_sum(UnscaledValue(sales_amt#21))]
Aggregate Attributes [2]: [sum#64, sum#126]
Results [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sum#66, sum#127]

(148) Exchange
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sum#66, sum#127]
Arguments: hashpartitioning(d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(149) HashAggregate [codegen id : 37]
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sum#66, sum#127]
Keys [5]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Functions [2]: [sum(sales_cnt#20), sum(UnscaledValue(sales_amt#21))]
Aggregate Attributes [2]: [sum(sales_cnt#20)#68, sum(UnscaledValue(sales_amt#21))#69]
Results [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sum(sales_cnt#20)#68 AS sales_cnt#128, MakeDecimal(sum(UnscaledValue(sales_amt#21))#69,18,2) AS sales_amt#129]

(150) Filter [codegen id : 37]
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#128, sales_amt#129]
Condition : isnotnull(sales_cnt#128)

(151) Exchange
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#128, sales_amt#129]
Arguments: hashpartitioning(i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(152) Sort [codegen id : 38]
Input [7]: [d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#128, sales_amt#129]
Arguments: [i_brand_id#79 ASC NULLS FIRST, i_class_id#80 ASC NULLS FIRST, i_category_id#81 ASC NULLS FIRST, i_manufact_id#83 ASC NULLS FIRST], false, 0

(153) SortMergeJoin [codegen id : 39]
Left keys [4]: [i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12]
Right keys [4]: [i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83]
Join type: Inner
Join condition: ((cast(sales_cnt#70 as decimal(17,2)) / cast(sales_cnt#128 as decimal(17,2))) < 0.90000000000000000000)

(154) Project [codegen id : 39]
Output [10]: [d_year#85 AS prev_year#130, d_year#14 AS year#131, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#128 AS prev_yr_cnt#132, sales_cnt#70 AS curr_yr_cnt#133, (sales_cnt#70 - sales_cnt#128) AS sales_cnt_diff#134, (sales_amt#71 - sales_amt#129) AS sales_amt_diff#135]
Input [14]: [d_year#14, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, sales_cnt#70, sales_amt#71, d_year#85, i_brand_id#79, i_class_id#80, i_category_id#81, i_manufact_id#83, sales_cnt#128, sales_amt#129]

(155) TakeOrderedAndProject
Input [10]: [prev_year#130, year#131, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, prev_yr_cnt#132, curr_yr_cnt#133, sales_cnt_diff#134, sales_amt_diff#135]
Arguments: 100, [sales_cnt_diff#134 ASC NULLS FIRST, sales_amt_diff#135 ASC NULLS FIRST], [prev_year#130, year#131, i_brand_id#8, i_class_id#9, i_category_id#10, i_manufact_id#12, prev_yr_cnt#132, curr_yr_cnt#133, sales_cnt_diff#134, sales_amt_diff#135]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (159)
+- * ColumnarToRow (158)
   +- CometFilter (157)
      +- CometScan parquet spark_catalog.default.date_dim (156)


(156) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(157) CometFilter
Input [2]: [d_date_sk#13, d_year#14]
Condition : ((isnotnull(d_year#14) AND (d_year#14 = 2002)) AND isnotnull(d_date_sk#13))

(158) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#13, d_year#14]

(159) BroadcastExchange
Input [2]: [d_date_sk#13, d_year#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=16]

Subquery:2 Hosting operator id = 25 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#6

Subquery:3 Hosting operator id = 49 Hosting Expression = ws_sold_date_sk#47 IN dynamicpruning#6

Subquery:4 Hosting operator id = 83 Hosting Expression = cs_sold_date_sk#76 IN dynamicpruning#77
BroadcastExchange (163)
+- * ColumnarToRow (162)
   +- CometFilter (161)
      +- CometScan parquet spark_catalog.default.date_dim (160)


(160) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#84, d_year#85]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(161) CometFilter
Input [2]: [d_date_sk#84, d_year#85]
Condition : ((isnotnull(d_year#85) AND (d_year#85 = 2001)) AND isnotnull(d_date_sk#84))

(162) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#84, d_year#85]

(163) BroadcastExchange
Input [2]: [d_date_sk#84, d_year#85]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=17]

Subquery:5 Hosting operator id = 103 Hosting Expression = ss_sold_date_sk#94 IN dynamicpruning#77

Subquery:6 Hosting operator id = 123 Hosting Expression = ws_sold_date_sk#112 IN dynamicpruning#77


